var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.386,1,2.668]],["body/modules/AppModule.html",[0,1.675,1,5.173,2,1.512,3,2.163,4,2.77,5,2.77,6,4.17,7,0.018,8,4.17,9,4.17,10,3.876,11,3.625,12,3.625,13,2.428,14,1.698,15,1.698,16,0.172,17,0.172,18,0.195,19,2.475,20,2.764,21,0.489,22,0.578,23,2.77,24,1.933,25,3.962,26,1.433,27,3.217,28,3.217,29,3.217,30,3.217,31,3.217,32,3.217,33,2.77,34,3.217,35,2.255,36,2.77,37,2.77,38,3.217,39,3.54,40,1.512,41,3.217,42,2.77,43,3.217,44,3.217,45,3.217,46,2.77,47,2.475,48,0.885,49,0.154,50,3.217,51,2.77,52,6.204,53,5.341,54,3.217,55,3.217,56,3.217,57,3.217,58,3.217,59,1.171,60,3.217,61,3.217,62,1.23,63,3.217,64,3.217,65,2.77,66,3.217,67,3.217,68,3.217,69,2.393,70,3.217,71,3.217,72,3.217,73,2.77,74,3.217,75,3.217,76,3.217,77,3.217,78,3.217,79,1.23,80,1.807,81,0.172,82,0.083,83,0.011,84,0.011]],["title/controllers/AuthController.html",[85,1.455,86,2.668]],["body/controllers/AuthController.html",[7,0.018,16,0.231,17,0.231,18,0.184,21,0.5,22,0.778,48,1.191,49,0.207,79,1.655,81,0.231,82,0.112,83,0.013,84,0.013,85,1.655,86,3.952,87,3.729,88,2.602,89,4.331,90,0.306,91,1.414,92,2.396,93,4.855,94,4.331,95,4.655,96,1.368,97,4.331,98,0.387,99,4.331,100,0.99,101,0.444,102,0.566,103,5.639,104,1.037,105,1.83,106,3.036,107,1.83,108,4.331,109,2.799,110,3.952,111,3.332,112,3.522,113,3.332,114,3.729,115,2.602,116,2.799,117,1.74,118,4.331,119,4.331,120,4.331,121,1.577,122,3.729,123,1.83,124,1.83,125,4.331,126,4.331,127,4.331,128,4.331]],["title/modules/AuthModule.html",[0,1.386,6,2.46]],["body/modules/AuthModule.html",[0,1.774,2,1.641,3,2.291,6,4.555,7,0.018,13,2.572,14,1.841,15,1.841,16,0.186,17,0.186,18,0.148,20,2.096,21,0.511,22,0.627,24,2.096,26,1.554,79,1.863,80,2.738,81,0.186,82,0.09,83,0.011,84,0.011,86,3.936,112,3.897,113,2.685,115,2.096,129,3.004,130,3.004,131,3.004,132,3.897,133,3.897,134,4.282,135,4.282,136,3.49,137,2.928,138,3.49,139,2.291,140,3.49,141,1.736,142,3.004,143,4.874,144,3.49,145,3.49,146,2.685,147,2.446,148,3.49,149,3.49,150,3.004,151,3.49,152,3.004,153,3.004,154,3.49,155,3.49,156,3.49,157,4.874,158,3.004]],["title/injectables/AuthService.html",[112,2.138,159,0.791]],["body/injectables/AuthService.html",[7,0.018,16,0.177,17,0.177,18,0.14,21,0.444,22,0.595,42,2.848,48,1.632,49,0.261,59,1.709,62,2.085,81,0.177,82,0.085,83,0.011,84,0.011,90,0.234,91,1.177,92,2.489,93,4.041,98,0.487,100,1.246,101,0.559,102,0.714,104,1.124,105,1.984,107,1.398,112,2.637,121,1.709,123,2.306,124,1.984,139,2.791,146,2.545,159,0.976,160,1.329,161,2.848,162,4.695,163,3.309,164,6.699,165,3.534,166,3.309,167,4.041,168,4.695,169,3.309,170,1.555,171,4.695,172,1.42,173,3.309,174,2.545,175,2.545,176,3.611,177,2.319,178,2.545,179,2.518,180,5.938,181,2.43,182,3.309,183,4.695,184,3.309,185,4.695,186,3.033,187,3.309,188,2.545,189,3.309,190,2.138,191,2.565,192,3.309,193,4.695,194,2.545,195,4.695,196,0.756,197,3.309,198,3.309,199,2.848,200,3.309,201,3.309,202,3.309]],["title/classes/CreateMainUserDto.html",[82,0.098,203,2.46]],["body/classes/CreateMainUserDto.html",[7,0.018,16,0.153,17,0.153,18,0.122,21,0.203,49,0.342,59,1.834,62,1.925,81,0.153,82,0.109,83,0.01,84,0.01,90,0.203,96,2.217,98,0.627,101,0.57,102,0.862,172,1.591,190,1.857,191,2.788,196,0.969,203,2.74,204,0.951,205,4.259,206,4.582,207,1.857,208,1.063,209,2.368,210,3.531,211,2.368,212,3.026,213,2.368,214,2.368,215,3.255,216,2.368,217,2.243,218,2.874,219,2.547,220,2.874,221,3.215,222,2.874,223,2.874,224,2.474,225,2.74,226,2.014,227,2.382,228,3.386,229,2.874,230,4.24,231,3.34,232,2.874,233,2.874,234,2.874,235,2.547,236,2.874,237,2.874,238,2.874,239,2.547,240,2.874,241,2.874,242,2.874,243,1.45,244,2.874,245,2.874,246,2.874,247,2.74,248,1.857,249,1.614,250,2.237,251,1.857,252,1.28,253,0.969,254,2.74,255,1.726,256,1.857,257,1.857,258,2.211,259,1.726]],["title/classes/CreateOwnerDto.html",[82,0.098,260,2.287]],["body/classes/CreateOwnerDto.html",[7,0.018,16,0.165,17,0.165,18,0.131,21,0.316,49,0.333,59,1.912,62,2.007,81,0.165,82,0.135,83,0.01,84,0.01,90,0.219,96,2.197,98,0.621,101,0.59,102,0.879,117,1.241,172,1.635,196,0.706,204,1.023,208,1.121,209,2.469,211,2.469,213,2.469,214,2.469,216,2.469,219,3.824,221,3.086,228,3.222,231,3.457,235,2.685,239,2.685,243,0.889,247,2.888,248,1.996,249,1.736,250,1.63,251,1.996,252,1.376,253,0.706,254,2.888,255,1.856,256,1.996,257,1.996,259,3.155,260,2.685,261,4.937,262,2.165,263,4.521,264,4.521,265,2.66,266,3.09,267,2.66,268,3.09,269,3.848,270,3.09,271,3.09,272,2.66,273,3.09,274,4.47,275,3.09,276,3.09,277,2.377,278,3.09,279,2.66,280,3.09,281,2.66,282,3.09,283,3.687,284,4.28]],["title/classes/CreateRoleDto.html",[82,0.098,285,2.287]],["body/classes/CreateRoleDto.html",[7,0.018,16,0.2,17,0.2,18,0.159,21,0.412,49,0.324,69,2.277,81,0.2,82,0.15,83,0.012,84,0.012,90,0.265,96,2.071,98,0.586,101,0.597,117,1.503,172,1.578,196,0.855,204,1.238,208,1.282,221,2.739,228,3.075,250,3.305,252,1.666,253,0.855,281,4.403,283,4.105,285,3.072,286,5.208,287,2.878,288,3.5,289,3.765,290,3.115,291,2.523,292,5.114,293,3.742,294,3.742,295,3.742,296,3.742,297,2.898,298,3.221,299,3.742,300,2.622,301,2.247,302,2.418,303,2.102,304,3.221,305,2.622,306,2.102]],["title/classes/CreateUserDto.html",[82,0.098,307,2.287]],["body/classes/CreateUserDto.html",[7,0.018,16,0.154,17,0.154,18,0.122,21,0.301,35,2.023,49,0.342,59,1.838,62,1.93,81,0.154,82,0.13,83,0.01,84,0.01,90,0.204,96,2.162,98,0.612,101,0.609,102,0.863,117,1.159,172,1.601,190,1.865,196,1.154,204,0.955,205,4.17,207,1.865,208,1.266,209,2.374,211,2.374,212,3.033,213,2.374,214,2.374,216,2.374,217,2.249,219,2.555,221,2.793,224,2.485,225,2.748,226,2.023,227,2.389,228,3.279,231,3.733,235,2.555,239,2.555,243,1.604,247,2.748,248,1.865,249,1.621,250,2.244,251,1.865,252,1.285,253,0.972,254,2.748,255,1.734,256,1.865,257,1.865,258,2.22,259,1.734,265,2.485,267,2.485,269,3.661,272,2.485,277,2.22,279,2.485,283,3.491,284,4.356,298,2.485,307,2.555,308,2.886,309,2.886,310,2.886,311,2.886,312,2.886,313,2.886,314,2.886,315,2.886,316,3.661,317,3.661,318,2.886,319,2.886,320,2.485,321,2.886,322,2.22,323,2.22,324,2.485]],["title/injectables/ErrorsInterceptor.html",[159,0.791,325,2.929]],["body/injectables/ErrorsInterceptor.html",[7,0.018,16,0.246,17,0.246,18,0.195,21,0.457,22,0.827,48,1.265,49,0.22,81,0.246,82,0.119,83,0.014,84,0.014,90,0.326,91,1.47,98,0.411,100,1.051,101,0.471,102,0.602,104,1.101,159,1.219,160,1.848,325,4.511,326,3.962,327,4.511,328,5.048,329,3.817,330,4.762,331,5.227,332,4.602,333,3.54,334,4.964,335,4.511,336,5.864,337,5.864,338,3.225,339,4.602,340,3.54,341,2.163,342,4.602,343,4.602,344,2.289]],["title/controllers/GlobalController.html",[85,1.455,345,2.929]],["body/controllers/GlobalController.html",[7,0.017,16,0.3,17,0.3,18,0.238,21,0.397,22,1.009,79,2.146,81,0.3,82,0.145,83,0.015,84,0.015,85,2.146,88,3.374,345,5.097,346,4.835,347,4.32,348,5.616]],["title/modules/GlobalModule.html",[0,1.386,8,2.46]],["body/modules/GlobalModule.html",[0,2.082,2,2.081,3,2.689,7,0.018,8,4.481,13,3.018,14,2.336,15,2.336,16,0.236,17,0.236,18,0.188,21,0.405,22,0.796,80,2.487,81,0.236,82,0.114,83,0.013,84,0.013,132,4.06,133,4.06,137,3.436,165,3.864,347,4.4,349,3.811,350,3.811,351,4.427,352,4.427,353,5.72]],["title/injectables/GlobalService.html",[159,0.791,165,2.009]],["body/injectables/GlobalService.html",[7,0.018,16,0.25,17,0.25,18,0.198,21,0.331,22,0.841,48,1.286,49,0.224,81,0.25,82,0.121,83,0.014,84,0.014,90,0.331,91,1.485,98,0.418,100,1.069,101,0.479,102,0.612,104,1.12,159,1.232,160,1.879,165,3.126,225,3.023,227,2.628,253,1.486,354,4.028,355,5.926,356,5.926,357,4.558,358,4.679,359,4.679,360,6.837,361,4.679,362,4.679,363,4.679,364,4.679,365,4.679]],["title/classes/HttpExceptionFilter.html",[82,0.098,366,2.668]],["body/classes/HttpExceptionFilter.html",[7,0.018,16,0.232,17,0.232,18,0.184,21,0.4,22,0.781,49,0.208,51,5.406,81,0.232,82,0.112,83,0.013,84,0.013,90,0.307,91,1.417,98,0.388,100,0.993,101,0.445,102,0.568,104,1.04,179,2.671,204,1.438,341,2.656,344,2.161,366,3.96,367,4.347,368,3.741,369,6.28,370,6.28,371,5.651,372,5.116,373,6.65,374,4.345,375,4.345,376,2.441,377,3.651,378,3.772,379,3.342,380,4.345,381,3.342,382,4.345,383,4.345,384,4.345,385,5.651,386,4.345,387,4.345,388,4.345,389,4.345,390,4.345,391,4.345,392,4.345,393,4.345,394,4.345,395,3.741,396,4.345]],["title/injectables/JwtAuthGuard.html",[159,0.791,397,2.009]],["body/injectables/JwtAuthGuard.html",[7,0.018,16,0.23,17,0.23,18,0.183,21,0.469,22,0.776,48,1.547,49,0.269,69,1.923,81,0.23,82,0.111,83,0.013,84,0.013,90,0.306,91,1.411,98,0.503,100,1.286,101,0.577,102,0.736,104,1.033,111,3.322,114,3.717,115,2.594,121,1.572,159,1.17,160,1.734,179,1.734,329,3.727,397,2.969,398,4.388,399,3.717,400,4.845,401,3.717,402,6.073,403,4.318,404,4.845,405,4.318,406,3.717,407,3.322,408,3.322,409,3.322,410,4.318,411,4.318,412,3.322,413,4.845,414,4.318,415,3.717,416,3.717,417,4.318]],["title/injectables/JwtStrategy.html",[134,2.46,159,0.791]],["body/injectables/JwtStrategy.html",[7,0.018,16,0.239,17,0.239,18,0.19,21,0.476,22,0.806,48,1.233,49,0.214,59,1.632,81,0.239,82,0.116,83,0.013,84,0.013,90,0.317,91,1.446,92,2.436,98,0.515,100,1.024,101,0.459,102,0.586,104,1.073,105,1.895,115,2.693,121,2.321,134,3.726,147,3.142,153,3.86,159,1.199,160,1.801,199,3.86,227,2.519,409,3.449,412,3.449,418,3.86,419,4.965,420,4.484,421,5.767,422,4.484,423,4.484,424,3.86,425,3.449,426,3.449,427,3.86,428,4.484,429,3.86,430,4.484,431,4.484,432,4.484,433,4.484,434,3.449,435,4.484,436,4.484]],["title/injectables/LocalStrategy.html",[135,2.46,159,0.791]],["body/injectables/LocalStrategy.html",[7,0.018,16,0.222,17,0.222,18,0.176,21,0.463,22,0.748,48,1.145,49,0.263,59,1.516,62,2.5,81,0.222,82,0.107,83,0.013,84,0.013,90,0.295,91,1.378,92,2.351,98,0.491,100,1.255,101,0.563,102,0.719,104,0.997,105,1.76,107,1.76,112,3.923,113,3.203,115,2.501,121,2,122,3.585,123,1.76,124,1.76,135,3.551,159,1.142,160,1.672,170,2.892,172,1.522,179,1.672,181,1.854,344,2.071,409,3.203,412,3.203,419,4.731,424,3.585,425,3.203,427,3.585,429,3.585,437,3.585,438,4.164,439,4.164,440,5.496,441,4.164,442,3.585,443,5.496,444,4.164,445,3.203]],["title/injectables/LoggerMiddleware.html",[159,0.791,446,2.138]],["body/injectables/LoggerMiddleware.html",[7,0.018,16,0.221,17,0.221,18,0.175,21,0.387,22,0.744,49,0.198,81,0.221,82,0.107,83,0.013,84,0.013,90,0.293,91,1.372,98,0.37,100,0.946,101,0.424,102,0.541,104,0.991,109,2.675,159,1.138,160,1.663,330,4.574,341,1.946,376,2.325,377,4.506,378,3.92,379,3.184,395,4.713,446,3.075,447,3.564,448,4.713,449,5.474,450,6.133,451,6.526,452,4.14,453,4.14,454,5.474,455,6.133,456,5.474,457,7.22,458,5.474,459,5.474,460,4.14,461,4.14]],["title/classes/LoginDto.html",[82,0.098,95,2.668]],["body/classes/LoginDto.html",[7,0.018,16,0.257,17,0.257,18,0.204,21,0.426,49,0.288,59,2.397,62,2.517,81,0.257,82,0.155,83,0.014,84,0.014,90,0.34,95,4.224,96,1.904,98,0.538,117,1.931,172,1.505,204,1.591,208,1.511,221,3.095,231,3.621,239,3.621,249,2.7,252,2.141,255,2.888,277,3.698,283,3.699,320,4.138,322,3.698,462,4.138,463,4.807,464,4.807]],["title/controllers/OwnerController.html",[85,1.455,465,2.668]],["body/controllers/OwnerController.html",[7,0.018,16,0.219,17,0.219,18,0.174,21,0.479,22,0.737,48,1.128,49,0.196,79,1.568,81,0.219,82,0.106,83,0.013,84,0.013,85,1.568,88,2.465,90,0.29,91,1.364,92,2.658,96,1.719,98,0.486,100,0.937,101,0.42,102,0.537,104,1.303,105,1.734,106,2.876,107,1.734,109,2.651,110,3.814,111,3.156,116,2.651,117,1.648,121,1.494,123,1.734,124,1.734,181,1.827,191,1.929,260,4.178,465,3.814,466,3.532,467,2.871,468,3.906,469,3.532,470,4.103,471,4.103,472,4.103,473,4.103,474,3.156,475,3.156,476,3.668,477,3.532,478,2.465,479,3.532,480,3.814,481,4.103,482,4.103,483,4.103,484,3.156,485,4.103,486,3.156,487,3.156,488,4.103,489,4.103]],["title/entities/OwnerEntity.html",[490,1.79,491,2.009]],["body/entities/OwnerEntity.html",[7,0.018,16,0.213,17,0.213,18,0.169,21,0.378,40,1.874,49,0.337,81,0.213,82,0.103,83,0.012,84,0.012,90,0.282,96,2.179,98,0.616,101,0.617,141,3.197,142,3.432,170,2.51,172,1.401,196,1.375,208,1.338,253,1.22,290,2.993,490,2.51,491,2.817,492,1.685,493,3.432,494,4.63,495,4.63,496,4.218,497,4.945,498,4.63,499,3.986,500,4.697,501,3.986,502,3.067,503,4.107,504,3.986,505,3.986,506,4.63,507,3.986,508,3.432,509,5.339,510,3.986,511,4.596,512,3.741]],["title/modules/OwnerModule.html",[0,1.386,9,2.46]],["body/modules/OwnerModule.html",[0,1.698,2,1.541,3,2.192,7,0.018,9,4.692,10,3.9,11,3.647,12,3.647,13,2.46,14,1.729,15,1.729,16,0.175,17,0.175,18,0.139,20,2.801,21,0.499,22,0.589,23,2.822,24,1.969,26,1.46,49,0.157,79,1.782,80,2.619,81,0.175,82,0.084,83,0.011,84,0.011,91,0.822,98,0.293,100,0.749,101,0.336,102,0.429,104,0.784,132,3.836,133,3.753,137,2.801,341,1.541,376,1.841,397,3.525,446,1.841,465,3.804,476,4.102,477,2.822,491,1.729,492,1.385,513,2.822,514,2.822,515,2.822,516,3.278,517,3.278,518,2.297,519,3.268,520,3.278,521,2.297,522,3.268,523,2.822,524,2.297,525,2.521,526,3.278,527,2.822,528,3.278,529,3.278,530,2.297,531,2.822,532,4.663,533,3.278]],["title/injectables/OwnerService.html",[159,0.791,476,2.287]],["body/injectables/OwnerService.html",[7,0.018,16,0.129,17,0.129,18,0.102,21,0.463,22,0.434,26,1.075,40,1.135,48,1.596,49,0.263,59,0.879,62,0.922,69,1.075,81,0.129,82,0.062,83,0.009,84,0.009,90,0.171,91,0.932,92,2.67,98,0.519,100,1.256,101,0.64,102,0.719,104,1.316,105,2.323,107,1.02,121,1.353,123,2.152,124,2.152,139,2.844,159,0.773,160,0.969,174,1.857,177,1.692,179,2.509,181,2.448,186,1.56,191,2.131,196,1.327,203,3.909,205,1.45,206,2.402,209,1.135,210,1.692,211,1.135,212,1.45,213,1.135,214,1.135,215,1.56,216,1.135,217,1.075,243,0.695,253,1.327,260,3.302,288,1.45,289,1.56,290,1.849,291,0.879,357,3.29,467,1.961,468,3.058,469,3.2,476,2.233,478,2.233,479,3.2,491,1.274,492,1.02,534,2.078,535,3.717,536,3.717,537,2.402,538,2.414,539,3.568,540,3.192,541,3.192,542,2.414,543,3.717,544,2.414,545,3.717,546,4.24,547,2.414,548,3.717,549,2.414,550,2.402,551,2.414,552,2.414,553,1.692,554,1.857,555,1.857,556,2.078,557,2.078,558,2.414,559,1.857,560,1.857,561,2.414,562,1.857,563,2.414,564,2.414,565,2.414,566,3.717,567,2.414,568,2.414,569,2.414,570,2.414,571,2.414,572,2.414,573,2.414,574,3.717,575,2.414,576,2.414,577,2.078,578,2.414,579,4.533,580,2.414,581,5.091,582,2.414,583,2.414,584,2.414,585,2.414,586,2.414,587,2.414,588,2.414,589,2.414,590,2.414,591,2.414]],["title/entities/PermissionEntity.html",[297,1.893,490,1.79]],["body/entities/PermissionEntity.html",[7,0.018,16,0.207,17,0.207,18,0.165,21,0.275,40,1.827,49,0.318,69,3.247,81,0.207,82,0.1,83,0.012,84,0.012,90,0.275,96,2.099,98,0.594,102,0.686,172,1.387,196,1.358,208,1.316,253,1.199,290,2.955,297,3.54,301,3.569,302,3.391,303,3.338,306,3.338,490,2.467,492,1.643,500,4.165,508,3.346,511,4.518,512,4.165,592,3.346,593,6.363,594,5.249,595,4.518,596,4.518,597,3.887,598,4.037,599,3.887,600,3.887,601,4.518,602,3.887,603,3.887,604,5.249,605,3.887,606,5.249]],["title/classes/Permissions.html",[82,0.098,291,1.386]],["body/classes/Permissions.html",[7,0.018,16,0.2,17,0.2,18,0.159,21,0.412,49,0.314,69,2.789,81,0.2,82,0.15,83,0.012,84,0.012,90,0.265,96,2.071,98,0.586,101,0.383,102,0.669,117,1.503,172,1.538,196,1.331,204,1.238,208,1.282,221,2.739,228,3.075,250,3.075,252,1.666,253,0.855,283,4.191,285,2.247,286,5.208,287,2.878,288,2.247,289,2.418,290,3.115,291,2.569,297,2.544,300,2.622,301,3.5,302,2.418,303,3.273,304,4.403,305,3.584,306,3.273,607,3.742,608,3.742,609,3.742,610,3.742,611,3.742,612,3.742,613,3.742]],["title/classes/Permissions-1.html",[82,0.082,291,1.161,614,2.453]],["body/classes/Permissions-1.html",[7,0.017,16,0.284,17,0.284,18,0.225,49,0.307,81,0.284,82,0.137,83,0.015,84,0.015,90,0.376,98,0.573,101,0.706,172,1.398,196,1.573,204,1.76,208,1.608,253,1.465,291,2.335,615,4.578,616,5.318,617,5.318]],["title/controllers/PermissionsController.html",[85,1.455,618,2.668]],["body/controllers/PermissionsController.html",[7,0.018,16,0.238,17,0.238,18,0.189,21,0.475,22,0.801,48,1.225,49,0.213,79,1.703,81,0.238,82,0.115,83,0.013,84,0.013,85,1.703,88,2.676,90,0.315,91,1.44,92,2.429,96,1.407,98,0.398,100,1.018,101,0.457,102,0.583,104,1.066,105,1.883,107,1.883,116,2.879,117,1.789,121,1.622,123,1.883,124,1.883,291,1.622,480,4.025,541,3.353,560,3.427,618,4.025,619,3.836,620,5.743,621,4.455,622,3.771,623,5.743,624,4.455,625,4.418,626,3.836,627,2.503,628,3.122,629,4.455,630,4.455,631,4.455,632,3.836,633,3.836,634,3.427]],["title/guards/PermissionsGaurd.html",[635,2.929,636,2.46]],["body/guards/PermissionsGaurd.html",[7,0.018,16,0.201,17,0.201,18,0.16,21,0.465,22,0.678,48,1.609,49,0.246,69,1.68,81,0.201,82,0.097,83,0.012,84,0.012,90,0.267,91,1.289,92,2.402,98,0.459,100,1.175,101,0.527,102,0.673,104,0.903,107,1.594,121,1.872,123,2.173,124,1.594,159,1.069,179,2.641,181,1.68,329,3.53,341,1.773,377,2.437,400,5.41,401,3.247,402,5.843,404,4.427,406,3.247,407,2.901,415,3.247,416,3.247,541,3.665,557,3.247,560,2.901,627,2.119,628,2.643,632,3.247,636,3.323,637,3.772,638,3.247,639,3.772,640,3.772,641,5.143,642,3.956,643,3.247,644,2.901,645,5.143,646,3.772,647,3.772,648,3.772,649,3.604,650,3.772,651,3.772,652,3.772,653,3.772,654,3.772]],["title/modules/PermissionsModule.html",[0,1.386,10,2.287]],["body/modules/PermissionsModule.html",[0,1.698,2,1.541,3,2.192,7,0.018,10,4.282,11,3.647,12,3.647,13,2.46,14,1.729,15,1.729,16,0.175,17,0.175,18,0.139,20,2.801,21,0.499,22,0.589,24,1.969,26,1.46,49,0.157,79,1.782,80,2.619,81,0.175,82,0.084,83,0.011,84,0.011,91,0.822,98,0.293,100,0.749,101,0.336,102,0.429,104,0.784,132,3.903,133,3.836,137,2.801,297,1.63,341,1.541,347,3.587,376,1.841,397,3.525,398,2.297,446,1.841,492,1.385,518,2.297,519,3.268,521,2.297,522,3.268,524,2.297,527,2.822,530,3.268,531,2.822,541,3.603,618,3.804,626,2.822,636,3.013,655,2.822,656,2.822,657,3.278,658,3.278,659,3.278,660,3.278,661,3.278,662,3.278,663,2.822,664,3.278,665,3.278,666,4.663,667,3.278]],["title/injectables/PermissionsService.html",[159,0.791,541,2.009]],["body/injectables/PermissionsService.html",[7,0.018,16,0.148,17,0.148,18,0.117,21,0.449,22,0.498,26,1.234,40,1.303,48,1.606,49,0.279,81,0.148,82,0.071,83,0.01,84,0.01,90,0.196,91,1.035,92,2.546,98,0.522,100,1.335,101,0.599,102,0.764,104,1.308,105,2.084,107,1.171,121,1.502,123,2.084,124,2.084,139,2.568,159,0.858,160,1.113,167,4.245,172,1.075,174,2.132,177,1.943,179,1.981,181,1.838,186,1.791,243,0.798,253,1.399,291,1.009,297,3.155,300,1.943,301,3.282,303,1.557,306,1.557,357,3.775,434,3.175,467,2.178,539,3.829,540,3.347,541,2.178,553,1.943,556,2.386,559,2.132,649,2.893,668,2.386,669,4.128,670,4.128,671,4.128,672,2.772,673,2.772,674,4.128,675,4.128,676,3.775,677,2.772,678,4.128,679,2.772,680,4.128,681,2.772,682,4.128,683,2.772,684,1.943,685,2.772,686,2.772,687,2.772,688,2.772,689,4.931,690,2.772,691,2.132,692,2.772,693,2.772,694,2.772,695,2.772,696,5.842,697,2.772,698,2.772,699,2.772,700,2.772,701,2.772,702,2.772,703,2.772,704,2.772,705,2.772,706,2.772,707,2.772,708,2.772,709,2.772,710,2.772]],["title/classes/RegisterPermissionDto.html",[82,0.098,676,2.46]],["body/classes/RegisterPermissionDto.html",[7,0.018,16,0.223,17,0.223,18,0.177,21,0.296,49,0.334,81,0.223,82,0.142,83,0.013,84,0.013,90,0.296,96,2.068,98,0.585,102,0.856,172,1.524,196,0.954,204,1.382,208,1.38,221,3.2,228,3.455,250,2.905,252,1.86,253,0.954,290,3.257,301,3.934,303,4.003,306,3.679,676,3.558,684,4.77,711,3.213,712,5.86,713,4.177,714,4.177,715,4.177,716,4.177,717,4.177]],["title/interfaces/Response.html",[378,2.287,718,2.287]],["body/interfaces/Response.html",[7,0.018,16,0.253,17,0.253,18,0.201,21,0.463,22,0.852,48,1.304,49,0.227,81,0.319,82,0.122,83,0.014,84,0.014,90,0.336,159,1.242,208,1.498,327,3.648,329,3.357,330,3.323,331,4.597,333,3.648,334,4.597,335,4.597,338,3.323,340,3.648,341,2.229,378,3.59,718,2.848,719,3.648,720,3.648,721,5.448,722,5.633,723,4.082,724,3.323,725,4.082]],["title/classes/Role.html",[82,0.098,243,1.096]],["body/classes/Role.html",[7,0.017,16,0.216,17,0.216,18,0.171,21,0.381,49,0.258,59,1.472,62,1.546,81,0.216,82,0.156,83,0.012,84,0.012,90,0.286,98,0.481,101,0.662,102,0.705,117,1.624,172,1.626,196,1.385,204,1.338,208,1.351,209,1.901,211,1.901,213,1.901,214,1.901,216,1.901,219,3.642,221,3.324,228,3.553,231,3.238,235,2.429,239,2.429,243,1.552,247,3.483,248,2.613,249,2.272,250,2.134,251,2.613,252,1.801,253,1.231,254,3.483,255,2.429,256,2.613,257,2.613,259,3.642,260,2.429,261,4.249,262,2.834,263,3.481,264,3.481,283,3.972,284,4.72,726,4.044,727,4.044]],["title/classes/Role-1.html",[82,0.082,243,0.918,614,2.453]],["body/classes/Role-1.html",[7,0.017,16,0.264,17,0.264,18,0.209,49,0.333,81,0.264,82,0.127,83,0.014,84,0.014,90,0.35,98,0.623,101,0.683,102,0.802,172,1.592,196,1.523,204,1.636,208,1.537,243,1.766,253,1.401,288,4.006,291,2.427,728,4.255,729,4.943,730,4.943,731,4.943,732,4.943]],["title/classes/Role-2.html",[82,0.082,243,0.918,733,2.746]],["body/classes/Role-2.html",[7,0.017,16,0.264,17,0.264,18,0.209,49,0.333,81,0.264,82,0.127,83,0.014,84,0.014,90,0.35,98,0.623,101,0.683,102,0.802,172,1.592,196,1.523,204,1.636,208,1.537,243,1.766,253,1.401,288,4.006,291,2.427,734,4.255,735,4.943,736,4.943,737,4.943,738,4.943]],["title/classes/Role-3.html",[82,0.082,243,0.918,739,3.189]],["body/classes/Role-3.html",[7,0.018,16,0.201,17,0.201,18,0.159,21,0.363,35,2.636,49,0.324,59,1.369,62,1.438,81,0.201,82,0.151,83,0.012,84,0.012,90,0.266,98,0.459,101,0.673,102,0.671,117,1.511,172,1.595,196,1.501,204,1.245,205,3.51,207,2.431,208,1.465,209,1.768,211,1.768,212,2.26,213,1.768,214,1.768,216,1.768,217,1.675,219,2.26,221,3.089,225,2.431,227,2.113,228,3.578,231,3.51,235,2.26,239,2.26,243,1.807,247,3.317,248,2.431,249,2.113,250,2.708,251,2.431,252,1.675,253,1.335,254,3.317,255,2.26,256,2.431,257,2.431,258,2.894,259,2.26,283,3.809,284,4.753,307,2.26,316,3.238,317,3.238,322,2.894,323,2.894,324,3.238,740,3.762,741,3.762]],["title/entities/RoleEntity.html",[490,1.79,742,2.009]],["body/entities/RoleEntity.html",[7,0.018,16,0.176,17,0.176,18,0.14,21,0.419,40,1.548,49,0.341,69,2.639,81,0.176,82,0.085,83,0.011,84,0.011,90,0.233,96,2.228,98,0.63,101,0.558,141,2.947,172,1.49,191,2.558,196,1.243,208,1.173,253,1.069,288,3.269,289,3.517,290,2.707,291,1.981,297,2.947,300,2.308,302,3.023,490,2.199,491,3.127,492,1.392,494,4.187,495,4.187,497,4.558,498,4.187,500,4.688,502,2.533,503,3.599,506,4.187,512,3.279,598,3.599,742,2.469,743,2.835,744,5.442,745,3.293,746,3.293,747,4.028,748,3.293,749,3.293,750,3.293,751,3.293,752,3.293,753,3.293,754,2.835,755,3.293,756,3.293,757,4.685,758,4.685,759,4.028,760,4.028,761,3.293,762,2.835]],["title/controllers/RolesController.html",[85,1.455,763,2.668]],["body/controllers/RolesController.html",[7,0.018,16,0.178,17,0.178,18,0.142,21,0.445,22,0.6,48,1.508,49,0.262,79,1.277,81,0.178,82,0.086,83,0.011,84,0.011,85,1.277,88,2.006,90,0.236,91,1.185,92,2.667,96,1.732,98,0.49,100,1.253,101,0.562,102,0.717,104,1.313,105,2.318,106,2.341,107,1.412,109,3.054,116,2.158,117,1.342,121,1.216,123,1.412,124,1.412,179,1.342,181,1.487,196,1.08,217,1.487,243,1.579,253,1.253,285,3.925,344,1.661,372,2.569,445,2.569,467,2.894,468,2.839,474,2.569,475,2.569,478,2.006,480,3.312,484,3.636,486,2.569,487,2.569,537,3.544,540,2.894,550,2.158,559,2.569,622,3.974,625,5.278,627,3.081,628,2.341,634,3.636,763,3.312,764,2.876,765,2.876,766,2.876,767,3.34,768,3.34,769,3.34,770,2.876,771,3.34,772,2.876,773,2.876,774,4.069,775,2.876,776,2.876,777,3.34,778,3.34,779,3.34,780,3.34,781,3.34,782,2.876,783,3.34,784,2.876,785,2.876,786,2.876,787,3.34]],["title/modules/RolesModule.html",[0,1.386,11,2.138]],["body/modules/RolesModule.html",[0,1.862,2,1.759,3,2.404,7,0.018,11,3.684,13,2.698,14,1.974,15,1.974,16,0.2,17,0.2,18,0.159,20,2.247,21,0.49,22,0.672,24,2.247,26,1.666,49,0.179,79,1.955,80,2.102,81,0.2,82,0.096,83,0.012,84,0.012,91,0.938,98,0.334,100,0.855,101,0.383,102,0.489,104,0.895,132,3.964,133,3.964,137,3.072,341,1.759,376,2.102,397,2.698,398,2.622,446,2.102,492,1.581,518,2.622,519,3.584,521,2.622,522,3.584,524,2.622,525,2.878,530,2.622,540,3.723,742,1.974,763,4.084,775,3.221,788,3.221,789,3.221,790,3.742,791,3.742,792,3.742,793,3.742,794,5.114,795,3.742]],["title/injectables/RolesService.html",[159,0.791,540,2.009]],["body/injectables/RolesService.html",[7,0.018,16,0.148,17,0.148,18,0.117,21,0.433,22,0.497,26,1.232,40,1.3,48,1.791,49,0.279,69,2.193,81,0.148,82,0.071,83,0.01,84,0.01,90,0.196,91,1.033,92,2.662,98,0.521,100,1.333,101,0.598,102,0.763,104,1.306,105,2.307,107,1.169,121,1.5,123,1.742,124,1.742,159,0.857,160,1.111,165,3.345,175,2.128,178,2.128,179,1.978,181,1.835,186,2.663,191,2.315,196,1.488,243,1.68,253,1.668,285,3.676,291,1.5,303,1.554,306,1.554,357,4.59,467,2.175,468,2.476,478,1.662,492,1.169,537,2.663,539,3.825,540,2.175,550,2.663,553,1.939,562,3.17,577,2.382,742,1.46,765,3.548,776,2.382,796,2.382,797,4.121,798,2.766,799,2.766,800,4.121,801,2.766,802,2.766,803,4.121,804,2.766,805,3.548,806,2.766,807,2.766,808,2.766,809,4.121,810,4.121,811,2.766,812,2.766,813,2.766]],["title/classes/SerializedUser.html",[82,0.098,814,2.668]],["body/classes/SerializedUser.html",[7,0.018,16,0.199,17,0.199,18,0.158,21,0.361,49,0.349,59,2.115,62,2.221,81,0.199,82,0.131,83,0.012,84,0.012,90,0.263,96,1.175,98,0.652,100,0.85,101,0.64,102,0.935,121,1.355,172,1.641,196,1.327,204,1.232,208,1.277,209,2.732,211,2.732,213,2.732,214,2.732,216,2.732,217,2.588,253,1.164,742,3.066,814,3.571,815,3.204,816,5.096,817,6.546,818,5.096,819,3.722,820,3.722,821,3.722,822,3.722,823,3.722,824,3.722,825,5.003,826,3.722,827,3.722,828,3.722,829,2.863,830,3.204,831,3.722]],["title/classes/SingleOwnerDto.html",[82,0.098,546,2.668]],["body/classes/SingleOwnerDto.html",[7,0.018,16,0.257,17,0.257,18,0.204,21,0.341,49,0.289,81,0.257,82,0.156,83,0.014,84,0.014,90,0.341,96,1.908,98,0.54,101,0.676,172,1.507,204,1.596,208,1.514,219,4.152,221,3.1,249,2.709,252,2.148,259,3.628,261,4.622,262,3.38,290,3.28,546,4.233,554,5.073,832,6.041,833,4.824,834,4.824]],["title/injectables/TransformInterceptor.html",[159,0.791,724,2.668]],["body/injectables/TransformInterceptor.html",[7,0.018,16,0.242,17,0.242,18,0.192,21,0.454,22,0.816,48,1.249,49,0.217,81,0.31,82,0.117,83,0.013,84,0.013,90,0.321,91,1.458,98,0.406,100,1.038,101,0.465,102,0.594,104,1.087,159,1.209,160,1.824,327,4.934,328,3.91,329,3.798,330,4.495,331,5.202,333,4.473,334,4.934,335,4.473,338,3.183,340,3.494,341,2.135,378,2.728,718,2.728,720,3.494,721,4.473,722,3.91,723,3.91,724,4.075,725,3.91,835,4.542]],["title/classes/User.html",[82,0.098,170,1.79]],["body/classes/User.html",[7,0.017,16,0.216,17,0.216,18,0.171,21,0.286,49,0.351,59,2.207,62,2.317,81,0.216,82,0.104,83,0.012,84,0.012,90,0.286,98,0.656,101,0.621,102,0.939,170,2.534,172,1.658,196,1.385,204,1.338,208,1.351,209,2.85,211,2.85,213,2.85,214,2.85,216,2.85,217,2.7,243,1.861,253,1.231,836,3.481,837,4.044,838,4.044,839,4.044,840,4.044,841,4.044,842,4.044,843,4.044,844,4.044,845,4.044,846,4.044]],["title/entities/UserEntity.html",[141,1.893,490,1.79]],["body/entities/UserEntity.html",[7,0.018,16,0.134,17,0.134,18,0.107,21,0.396,40,1.184,49,0.339,59,1.694,62,1.778,69,3.24,81,0.134,82,0.099,83,0.009,84,0.009,90,0.178,92,0.962,96,2.224,98,0.629,101,0.477,141,1.909,172,1.547,176,2.953,181,1.121,190,1.627,194,1.937,196,1.063,208,0.962,209,2.187,210,3.261,211,2.187,212,2.795,213,2.187,214,2.187,215,3.007,216,2.187,217,2.072,225,2.481,227,2.924,235,1.512,253,0.877,302,3.621,305,1.765,376,1.414,490,1.805,491,3.24,492,1.064,494,3.579,495,3.579,497,4.004,498,3.579,500,4.637,502,1.937,503,2.953,506,3.579,512,2.691,595,3.305,596,3.305,598,3.579,601,4.481,742,2.746,747,2.168,754,2.168,757,3.305,758,3.305,759,4.006,760,4.006,762,2.168,825,3.305,829,1.937,830,2.168,847,2.168,848,2.518,849,2.518,850,2.518,851,5.205,852,2.518,853,2.518,854,2.518,855,2.518,856,2.518,857,2.518,858,2.518,859,2.518,860,2.518,861,2.518,862,2.518,863,2.518,864,2.518,865,2.518,866,2.518,867,2.518,868,2.518,869,2.518,870,3.839,871,2.518,872,2.518,873,2.518,874,2.518]],["title/interfaces/UserInfoType.html",[622,2.138,718,2.287]],["body/interfaces/UserInfoType.html",[7,0.018,16,0.2,17,0.2,18,0.159,21,0.362,22,0.672,39,3.934,48,1.602,49,0.324,81,0.334,83,0.012,84,0.012,90,0.265,170,3.183,172,1.27,179,2.719,191,3.183,196,1.547,208,1.282,253,1.168,329,2.873,377,2.418,381,2.878,426,2.878,622,3.518,627,2.102,718,2.247,719,2.878,875,2.622,876,5.392,877,4.403,878,3.742,879,3.221,880,4.403,881,3.742,882,3.221,883,3.221,884,4.403,885,3.221,886,5.392,887,4.403,888,4.403,889,5.392,890,4.403,891,4.403,892,3.221]],["title/controllers/UsersController.html",[85,1.455,893,2.668]],["body/controllers/UsersController.html",[7,0.018,16,0.148,17,0.148,18,0.117,21,0.471,22,0.497,48,1.501,49,0.261,79,1.057,81,0.148,82,0.071,83,0.01,84,0.01,85,1.057,88,1.662,90,0.196,91,1.033,92,2.662,96,1.724,98,0.488,100,1.247,101,0.559,102,0.714,104,1.306,105,2.307,106,1.939,107,1.169,109,2.663,116,1.788,117,1.111,121,1.007,123,1.169,124,1.169,139,2.315,170,2.877,177,1.939,179,1.655,181,1.835,196,0.942,253,1.125,307,3.676,344,2.05,366,3.452,367,2.128,372,2.128,445,3.17,467,2.599,468,2.959,474,2.128,475,2.128,478,1.662,480,2.888,484,2.128,486,2.128,487,2.128,496,1.939,537,3.183,550,1.788,555,2.128,622,3.954,625,5.213,627,3.066,628,1.939,633,2.382,634,3.789,643,2.382,766,2.382,770,2.382,772,2.382,773,2.382,774,3.548,782,2.382,784,3.548,785,3.548,786,3.548,893,2.888,894,2.382,895,3.548,896,2.382,897,2.766,898,2.766,899,2.766,900,2.766,901,4.121,902,2.766,903,4.699,904,4.699,905,2.766,906,2.766,907,2.766,908,2.766,909,2.766,910,2.382,911,2.766,912,2.128,913,3.789,914,1.788,915,2.382,916,2.766,917,2.766,918,2.766,919,4.121,920,2.766,921,2.766,922,2.766,923,2.766,924,2.766,925,2.766,926,2.766,927,2.766]],["title/modules/UsersModule.html",[0,1.386,12,2.138]],["body/modules/UsersModule.html",[0,1.825,2,1.709,3,2.357,7,0.018,12,3.646,13,2.645,14,1.918,15,1.918,16,0.194,17,0.194,18,0.154,20,2.183,21,0.496,22,0.653,24,2.183,26,1.619,49,0.174,79,1.916,80,2.042,81,0.194,82,0.094,83,0.012,84,0.012,91,0.911,98,0.325,100,0.83,101,0.372,102,0.475,104,0.87,132,3.995,133,3.995,137,3.012,139,3.294,141,1.808,150,3.129,158,4.316,341,1.709,376,2.042,397,2.645,446,2.042,492,1.536,518,2.547,519,3.514,521,2.547,522,3.514,523,3.129,524,2.547,525,2.796,530,3.514,636,3.24,663,3.129,893,4.022,910,3.129,928,3.129,929,3.129,930,3.635,931,3.635,932,3.635,933,3.635]],["title/injectables/UsersService.html",[139,1.79,159,0.791]],["body/injectables/UsersService.html",[7,0.018,16,0.107,17,0.107,18,0.085,21,0.427,22,0.359,26,0.889,40,0.939,48,1.771,49,0.28,59,1.951,62,0.763,81,0.107,82,0.051,83,0.007,84,0.007,90,0.141,91,0.803,92,2.697,98,0.523,100,1.337,101,0.648,102,0.765,104,1.347,105,2.379,107,0.844,121,1.166,123,1.354,124,1.354,139,1.506,141,1.593,159,0.666,160,0.802,165,2.97,170,2.519,172,0.874,175,1.536,178,1.536,179,2.487,181,2.386,186,3.244,188,1.536,194,1.536,196,1.379,203,3.244,206,1.291,209,0.939,210,2.245,211,1.506,212,1.2,213,1.885,214,1.506,215,2.964,216,0.939,217,0.889,227,1.122,253,1.658,307,3.219,344,1.593,357,4.653,434,3.084,467,1.69,468,1.924,478,1.924,537,2.07,539,3.215,550,2.07,553,1.4,555,2.464,562,2.464,721,2.464,805,2.757,814,1.4,895,2.757,896,2.757,903,3.452,904,3.949,913,2.464,914,1.291,934,1.719,935,3.203,936,3.203,937,3.203,938,1.997,939,1.997,940,3.203,941,1.997,942,3.203,943,1.997,944,1.997,945,3.203,946,1.997,947,3.203,948,1.997,949,3.203,950,1.997,951,1.997,952,1.997,953,1.997,954,1.997,955,3.203,956,1.997,957,1.997,958,1.997,959,1.997,960,1.997,961,1.997,962,1.997,963,1.997,964,1.997,965,1.997,966,4.009,967,3.203,968,3.203,969,1.997,970,3.203,971,1.997,972,3.203,973,3.203,974,3.203,975,1.997,976,1.997,977,1.997]],["title/coverage.html",[978,3.981]],["body/coverage.html",[7,0.018,18,0.097,19,1.757,39,4.123,47,1.757,49,0.109,82,0.18,83,0.008,84,0.008,85,2.17,86,1.601,87,1.966,95,1.601,110,1.601,112,1.283,134,1.476,135,1.476,139,1.074,141,1.136,147,1.601,159,1.386,161,1.966,165,1.205,170,1.074,203,1.476,205,2.629,206,1.476,207,2.828,243,1.423,260,1.372,261,3.067,262,3.067,285,1.372,286,2.739,287,2.739,291,1.296,297,1.136,305,5.432,307,1.372,325,1.757,326,1.966,344,1.136,345,1.757,346,1.966,354,1.966,366,1.601,367,1.757,368,1.966,378,1.372,397,1.205,398,1.601,399,1.966,408,1.757,418,1.966,437,1.966,446,1.283,447,1.966,462,1.966,465,1.601,466,1.966,476,1.372,490,2.324,491,1.205,493,1.966,534,1.966,540,1.205,541,1.205,546,1.601,554,1.757,592,1.966,615,1.966,618,1.601,619,1.966,622,1.283,627,1.283,635,1.757,636,1.476,638,1.966,642,1.757,644,1.757,649,1.601,668,1.966,676,1.476,684,1.601,691,1.757,711,1.757,718,2.139,720,2.739,724,1.601,728,1.966,734,1.966,742,1.205,743,1.966,763,1.601,764,1.966,796,1.966,814,1.601,815,1.966,836,1.966,847,1.966,875,3.464,893,1.601,894,1.966,912,1.757,934,1.966,978,1.757,979,1.966,980,2.284,981,2.284,982,6.133,983,1.966,984,3.066,985,7.306,986,6.564,987,3.561,988,1.966,989,6.839,990,1.966,991,1.966,992,1.966,993,4.377,994,1.966,995,1.966,996,2.284,997,1.966,998,1.966,999,4.943,1000,4.943,1001,1.966,1002,1.966,1003,1.757,1004,1.966,1005,1.966,1006,2.284,1007,1.757,1008,2.284,1009,2.284,1010,3.066,1011,3.066,1012,1.966,1013,1.966,1014,1.966,1015,2.284,1016,2.284]],["title/dependencies.html",[3,2.15,1017,2.746]],["body/dependencies.html",[3,2.149,7,0.018,22,0.821,26,2.036,33,3.936,40,2.149,82,0.15,83,0.014,84,0.014,115,2.746,117,1.836,146,3.517,176,3.517,252,2.036,338,3.204,379,3.517,407,3.517,425,4.949,426,4.492,442,3.936,829,3.517,879,3.936,913,3.517,914,2.954,1018,6.434,1019,4.572,1020,6.434,1021,4.572,1022,4.572,1023,4.572,1024,4.572,1025,4.572,1026,4.572,1027,4.572,1028,4.572,1029,4.572,1030,4.572,1031,4.572,1032,4.572,1033,4.572,1034,4.572,1035,4.572,1036,4.572,1037,4.572,1038,4.572,1039,4.572,1040,4.572,1041,4.572]],["title/miscellaneous/enumerations.html",[1042,1.683,1043,3.937]],["body/miscellaneous/enumerations.html",[7,0.018,83,0.015,84,0.015,90,0.361,226,5.277,915,6.071,1003,3.927,1007,3.927,1042,2.693,1043,4.395,1044,5.386,1045,5.105,1046,4.395,1047,5.105,1048,4.395,1049,5.105,1050,4.395,1051,5.105,1052,4.395,1053,5.105,1054,4.395,1055,5.105,1056,4.395,1057,5.105,1058,4.395,1059,5.105,1060,4.395]],["title/miscellaneous/functions.html",[1042,1.683,1061,3.937]],["body/miscellaneous/functions.html",[7,0.017,19,3.884,25,4.347,47,5.179,49,0.297,83,0.014,84,0.014,90,0.357,100,1.42,101,0.637,102,0.813,104,1.209,172,1.531,644,4.781,875,3.539,880,4.347,892,4.347,983,4.347,984,6.323,990,4.347,1014,5.35,1042,2.664,1061,4.347,1062,5.05,1063,5.05,1064,5.35,1065,5.05,1066,6.215]],["title/index.html",[90,0.226,1067,3.189,1068,3.189]],["body/index.html",[0,0.951,7,0.018,18,0.111,35,1.83,37,2.248,46,2.248,53,4.902,65,4.096,73,2.248,79,0.998,83,0.009,84,0.009,85,0.998,191,2.493,215,1.688,217,1.163,243,0.752,291,1.437,344,1.299,448,2.248,490,1.228,492,1.104,496,3.335,914,1.688,978,2.009,979,2.248,1069,2.612,1070,4.758,1071,2.612,1072,2.612,1073,2.612,1074,2.612,1075,2.612,1076,6.879,1077,4.758,1078,3.947,1079,7.089,1080,2.612,1081,5.695,1082,5.303,1083,2.612,1084,2.612,1085,3.947,1086,2.612,1087,2.612,1088,5.695,1089,4.758,1090,2.612,1091,3.947,1092,3.947,1093,2.612,1094,2.612,1095,3.947,1096,2.612,1097,2.612,1098,3.947,1099,2.612,1100,3.947,1101,2.612,1102,2.612,1103,2.612,1104,2.612,1105,2.612,1106,2.612,1107,2.612,1108,3.947,1109,2.612,1110,2.248,1111,3.947,1112,2.612,1113,4.758,1114,3.947,1115,2.612,1116,2.612,1117,2.612,1118,3.947,1119,2.612,1120,2.612,1121,2.612,1122,2.612,1123,3.947,1124,2.612,1125,2.612,1126,2.612,1127,4.758,1128,3.398,1129,2.612,1130,2.612,1131,2.612,1132,2.612,1133,2.612,1134,2.612,1135,2.612,1136,2.612,1137,2.612,1138,2.612,1139,2.612,1140,2.612,1141,3.947,1142,2.612,1143,2.612,1144,2.612,1145,3.947,1146,2.612,1147,2.612,1148,2.612,1149,2.612,1150,2.612,1151,2.612,1152,2.612,1153,2.612,1154,3.947,1155,2.612,1156,2.612,1157,2.612,1158,2.612,1159,2.612,1160,2.612,1161,2.612,1162,2.612,1163,2.612,1164,2.612,1165,2.612,1166,2.612,1167,2.612,1168,2.612,1169,2.612,1170,2.612,1171,2.612,1172,2.612,1173,2.612,1174,2.248,1175,3.947,1176,3.947,1177,2.612,1178,2.612,1179,2.612,1180,2.248,1181,2.248,1182,2.612]],["title/modules.html",[2,2.433]],["body/modules.html",[1,3.671,2,2.462,6,3.385,7,0.015,8,3.385,9,3.385,10,3.147,11,2.942,12,2.942,83,0.015,84,0.015,1183,7.498,1184,7.498,1185,7.498,1186,7.498]],["title/overview.html",[1187,4.455]],["body/overview.html",[1,4.982,2,1.306,3,1.943,4,2.391,5,2.391,6,4.215,7,0.018,8,3.534,9,4.504,10,4.135,11,3.443,12,3.443,13,2.181,14,1.465,15,1.465,79,1.061,83,0.01,84,0.01,112,3.072,129,2.391,130,2.391,131,2.391,132,4.203,133,4.203,134,3.19,135,3.19,139,2.571,160,1.115,165,2.886,204,0.919,349,2.391,350,2.391,397,2.886,476,3.285,492,1.174,513,2.391,514,2.391,515,2.391,540,2.886,541,2.886,614,2.137,635,2.137,655,2.391,656,2.391,719,2.137,733,2.391,788,2.391,789,2.391,928,2.391,929,2.391,1187,2.391,1188,2.777,1189,2.777,1190,2.777,1191,2.777,1192,2.777]],["title/properties.html",[208,1.146,1017,2.746]],["body/properties.html",[7,0.018,83,0.016,84,0.016,208,1.449,289,3.734,1110,4.975,1174,4.975,1180,4.975,1181,4.975,1193,5.779]],["title/miscellaneous/typealiases.html",[1042,1.683,1194,4.573]],["body/miscellaneous/typealiases.html",[7,0.015,49,0.349,83,0.015,84,0.015,90,0.372,191,2.994,205,3.158,206,4.428,207,4.428,243,1.834,303,3.578,684,3.685,711,5.272,712,5.484,876,6.132,1042,2.774,1195,5.258,1196,6.37,1197,6.37]],["title/miscellaneous/variables.html",[1042,1.683,1198,3.937]],["body/miscellaneous/variables.html",[7,0.018,36,3.319,48,0.696,49,0.317,69,1.127,83,0.009,84,0.009,90,0.179,110,2.702,141,1.259,147,2.702,152,2.179,170,2.453,172,1.138,179,1.875,188,3.591,190,4.514,191,2.782,196,0.881,217,1.127,226,4.895,243,1.503,290,3.506,291,2.154,297,1.259,301,4.234,306,2.622,323,1.947,329,1.422,344,1.259,377,1.636,381,1.947,408,2.965,413,2.179,467,2.463,491,1.336,496,2.702,622,1.422,627,2.165,642,2.965,649,2.702,676,3.017,691,2.965,742,1.336,875,1.774,877,2.179,882,2.179,883,2.179,884,2.179,885,2.179,886,3.319,887,2.179,888,2.179,889,3.319,890,2.179,891,2.179,912,2.965,914,2.491,988,2.179,991,2.179,992,3.319,994,2.179,995,3.319,997,2.179,998,3.319,1001,2.179,1002,3.319,1003,1.947,1004,2.179,1005,3.319,1007,1.947,1010,2.179,1011,2.179,1012,2.179,1013,3.319,1042,1.336,1044,4.019,1046,2.179,1048,2.179,1050,2.179,1052,2.179,1054,2.179,1056,2.179,1058,2.179,1060,2.179,1064,2.179,1128,2.179,1198,2.179,1199,3.855,1200,2.531,1201,5.219,1202,3.855,1203,2.531,1204,2.531,1205,2.531,1206,2.531,1207,2.531,1208,2.531,1209,2.531,1210,2.531,1211,2.531,1212,4.669,1213,2.531,1214,2.531,1215,2.531,1216,2.531,1217,2.531,1218,2.531,1219,2.531,1220,2.531,1221,2.531,1222,2.531,1223,2.531,1224,2.531,1225,2.531,1226,2.531]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/ErrorsInterceptor.html":{},"controllers/GlobalController.html":{},"modules/GlobalModule.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/OwnerController.html":{},"entities/OwnerEntity.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"interfaces/Response.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":305,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/Permissions.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1193,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1037,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1025,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":1041,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1024,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1032,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":985,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":993,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1009,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1006,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":982,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":986,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":987,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":999,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1000,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":996,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1008,"title":{},"body":{"coverage.html":{}}}],["00000",{"_index":580,"title":{},"body":{"injectables/OwnerService.html":{}}}],["1",{"_index":614,"title":{"classes/Permissions-1.html":{},"classes/Role-1.html":{}},"body":{"overview.html":{}}}],["1.0.0",{"_index":1034,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":235,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{},"entities/UserEntity.html":{}}}],["100",{"_index":219,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{},"classes/SingleOwnerDto.html":{}}}],["12",{"_index":1191,"title":{},"body":{"overview.html":{}}}],["16",{"_index":1192,"title":{},"body":{"overview.html":{}}}],["16.0.1",{"_index":1027,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":733,"title":{"classes/Role-2.html":{}},"body":{"overview.html":{}}}],["2.2.0",{"_index":1019,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":1030,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":231,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{}}}],["3",{"_index":739,"title":{"classes/Role-3.html":{}},"body":{}}],["3.0.2",{"_index":1039,"title":{},"body":{"dependencies.html":{}}}],["3.1.2",{"_index":1028,"title":{},"body":{"dependencies.html":{}}}],["360000s",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{}}}],["4",{"_index":1190,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1033,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":1031,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":1023,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":239,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{}}}],["6",{"_index":1189,"title":{},"body":{"overview.html":{}}}],["6.0.5",{"_index":1022,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1188,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":1040,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":1018,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":1020,"title":{},"body":{"dependencies.html":{}}}],["_context",{"_index":333,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["_data",{"_index":882,"title":{},"body":{"interfaces/UserInfoType.html":{},"miscellaneous/variables.html":{}}}],["_res",{"_index":450,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["access_token",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["actions",{"_index":1099,"title":{},"body":{"index.html":{}}}],["add",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["addbearerauth",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["address",{"_index":209,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"injectables/OwnerService.html":{},"classes/Role.html":{},"classes/Role-3.html":{},"classes/SerializedUser.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["addtag('authentication",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('owners",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('permissions",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('roles",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('users",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin",{"_index":579,"title":{},"body":{"injectables/OwnerService.html":{}}}],["aliases",{"_index":1195,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allthough",{"_index":1101,"title":{},"body":{"index.html":{}}}],["api's",{"_index":1132,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":480,"title":{},"body":{"controllers/OwnerController.html":{},"controllers/PermissionsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth()@get('/search",{"_index":472,"title":{},"body":{"controllers/OwnerController.html":{}}}],["apiproperty",{"_index":283,"title":{},"body":{"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/Permissions.html":{},"classes/Role.html":{},"classes/Role-3.html":{}}}],["apiproperty()@isnotempty",{"_index":281,"title":{},"body":{"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{}}}],["apiproperty()@isnotempty()@isemail",{"_index":267,"title":{},"body":{"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty()@isphonenumber('ir",{"_index":279,"title":{},"body":{"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty()@length(0",{"_index":274,"title":{},"body":{"classes/CreateOwnerDto.html":{}}}],["apiproperty()@isnotempty()@length(4",{"_index":320,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["apiproperty()@isnotempty()@length(8",{"_index":277,"title":{},"body":{"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["apiproperty()@isoptional",{"_index":292,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["apiproperty({isarray",{"_index":607,"title":{},"body":{"classes/Permissions.html":{}}}],["apiproperty({nullable",{"_index":612,"title":{},"body":{"classes/Permissions.html":{}}}],["apiproperty({type",{"_index":298,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{}}}],["apipropertyoptional",{"_index":284,"title":{},"body":{"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{}}}],["apipropertyoptional()@isoptional",{"_index":310,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apipropertyoptional()@isoptional()@length(0",{"_index":265,"title":{},"body":{"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{}}}],["apipropertyoptional()@isoptional()@length(10",{"_index":272,"title":{},"body":{"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{}}}],["apipropertyoptional()@isoptional()@length(5",{"_index":269,"title":{},"body":{"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{}}}],["apitags",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OwnerController.html":{},"controllers/PermissionsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["apitags('authentication",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('owners",{"_index":481,"title":{},"body":{"controllers/OwnerController.html":{}}}],["apitags('permissions",{"_index":629,"title":{},"body":{"controllers/PermissionsController.html":{}}}],["apitags('roles",{"_index":777,"title":{},"body":{"controllers/RolesController.html":{}}}],["apitags('users",{"_index":917,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1088,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":1167,"title":{},"body":{"index.html":{}}}],["app_guard",{"_index":530,"title":{},"body":{"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentshost",{"_index":373,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":316,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Role-3.html":{}}}],["arrayminsize",{"_index":251,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{}}}],["arrayminsize(1",{"_index":258,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateUserDto.html":{},"classes/Role-3.html":{}}}],["async",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/OwnerController.html":{},"injectables/OwnerService.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"injectables/PermissionsService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard",{"_index":524,"title":{},"body":{"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["auth.guard.ts",{"_index":399,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":405,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:7",{"_index":403,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth/auth.module",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":523,"title":{},"body":{"modules/OwnerModule.html":{},"modules/UsersModule.html":{}}}],["auth_service",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{}}}],["authcontroller",{"_index":86,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":1090,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":410,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1174,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":112,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/OwnerController.html":{},"injectables/OwnerService.html":{},"guards/PermissionsGaurd.html":{},"injectables/PermissionsService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["badgatewayexception",{"_index":336,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["bcrypt",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(this.password",{"_index":874,"title":{},"body":{"entities/UserEntity.html":{}}}],["beforeinsert",{"_index":870,"title":{},"body":{"entities/UserEntity.html":{}}}],["bigint",{"_index":503,"title":{},"body":{"entities/OwnerEntity.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["body",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LoggerMiddleware.html":{},"controllers/OwnerController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":225,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/GlobalService.html":{},"classes/Role-3.html":{},"entities/UserEntity.html":{}}}],["bootstrap",{"_index":984,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1186,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1183,"title":{},"body":{"modules.html":{}}}],["build",{"_index":1128,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["built",{"_index":1093,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":331,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":400,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionsGaurd.html":{}}}],["canactivate(context",{"_index":404,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionsGaurd.html":{}}}],["cascade",{"_index":595,"title":{},"body":{"entities/PermissionEntity.html":{},"entities/UserEntity.html":{}}}],["catch",{"_index":370,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":371,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":380,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":339,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["checkowner",{"_index":355,"title":{},"body":{"injectables/GlobalService.html":{}}}],["checkowner(record",{"_index":356,"title":{},"body":{"injectables/GlobalService.html":{}}}],["child",{"_index":712,"title":{},"body":{"classes/RegisterPermissionDto.html":{},"miscellaneous/typealiases.html":{}}}],["childpermission.children",{"_index":702,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["childpermission.children.foreach((grandchild",{"_index":703,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["children",{"_index":306,"title":{},"body":{"classes/CreateRoleDto.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"injectables/RolesService.html":{},"miscellaneous/variables.html":{}}}],["class",{"_index":82,"title":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"classes/RegisterPermissionDto.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"classes/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/ErrorsInterceptor.html":{},"controllers/GlobalController.html":{},"modules/GlobalModule.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/OwnerController.html":{},"entities/OwnerEntity.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"interfaces/Response.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":204,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"classes/RegisterPermissionDto.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"classes/User.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":907,"title":{},"body":{"controllers/UsersController.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_globalmodule",{"_index":349,"title":{},"body":{"modules/GlobalModule.html":{},"overview.html":{}}}],["cluster_globalmodule_exports",{"_index":350,"title":{},"body":{"modules/GlobalModule.html":{},"overview.html":{}}}],["cluster_ownermodule",{"_index":513,"title":{},"body":{"modules/OwnerModule.html":{},"overview.html":{}}}],["cluster_ownermodule_exports",{"_index":515,"title":{},"body":{"modules/OwnerModule.html":{},"overview.html":{}}}],["cluster_ownermodule_imports",{"_index":516,"title":{},"body":{"modules/OwnerModule.html":{}}}],["cluster_ownermodule_providers",{"_index":514,"title":{},"body":{"modules/OwnerModule.html":{},"overview.html":{}}}],["cluster_permissionsmodule",{"_index":655,"title":{},"body":{"modules/PermissionsModule.html":{},"overview.html":{}}}],["cluster_permissionsmodule_exports",{"_index":656,"title":{},"body":{"modules/PermissionsModule.html":{},"overview.html":{}}}],["cluster_permissionsmodule_imports",{"_index":658,"title":{},"body":{"modules/PermissionsModule.html":{}}}],["cluster_permissionsmodule_providers",{"_index":657,"title":{},"body":{"modules/PermissionsModule.html":{}}}],["cluster_rolesmodule",{"_index":788,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":789,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":928,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":929,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["color",{"_index":288,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/OwnerService.html":{},"classes/Permissions.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"entities/RoleEntity.html":{}}}],["column",{"_index":500,"title":{},"body":{"entities/OwnerEntity.html":{},"entities/PermissionEntity.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["column({default",{"_index":854,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({nullable",{"_index":598,"title":{},"body":{"entities/PermissionEntity.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["column({select",{"_index":864,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({unique",{"_index":851,"title":{},"body":{"entities/UserEntity.html":{}}}],["command",{"_index":1113,"title":{},"body":{"index.html":{}}}],["commands",{"_index":1138,"title":{},"body":{"index.html":{}}}],["compodocdescription",{"_index":1080,"title":{},"body":{"index.html":{}}}],["config",{"_index":1119,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":518,"title":{},"body":{"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":519,"title":{},"body":{"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["console",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error(exception",{"_index":387,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["console.info",{"_index":456,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["const",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OwnerService.html":{},"guards/PermissionsGaurd.html":{},"injectables/PermissionsService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":428,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/OwnerController.html":{},"injectables/OwnerService.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"injectables/PermissionsService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":438,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(ownerrepository",{"_index":538,"title":{},"body":{"injectables/OwnerService.html":{}}}],["constructor(partial",{"_index":816,"title":{},"body":{"classes/SerializedUser.html":{}}}],["constructor(permissionrepository",{"_index":672,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["constructor(private",{"_index":411,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(reflector",{"_index":401,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionsGaurd.html":{}}}],["constructor(rolerepository",{"_index":798,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(userrepository",{"_index":938,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":521,"title":{},"body":{"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(loggermiddleware).forroutes(ownercontroller",{"_index":533,"title":{},"body":{"modules/OwnerModule.html":{}}}],["consumer.apply(loggermiddleware).forroutes(permissionscontroller",{"_index":667,"title":{},"body":{"modules/PermissionsModule.html":{}}}],["consumer.apply(loggermiddleware).forroutes(rolescontroller",{"_index":795,"title":{},"body":{"modules/RolesModule.html":{}}}],["consumer.apply(loggermiddleware).forroutes(userscontroller",{"_index":933,"title":{},"body":{"modules/UsersModule.html":{}}}],["context",{"_index":406,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionsGaurd.html":{}}}],["context.getclass",{"_index":416,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionsGaurd.html":{}}}],["context.gethandler",{"_index":415,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionsGaurd.html":{}}}],["context.switchtohttp().getrequest",{"_index":647,"title":{},"body":{"guards/PermissionsGaurd.html":{}}}],["controller",{"_index":85,"title":{"controllers/AuthController.html":{},"controllers/GlobalController.html":{},"controllers/OwnerController.html":{},"controllers/PermissionsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/GlobalController.html":{},"controllers/OwnerController.html":{},"controllers/PermissionsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["controller('auth",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('global",{"_index":348,"title":{},"body":{"controllers/GlobalController.html":{}}}],["controller('owner",{"_index":482,"title":{},"body":{"controllers/OwnerController.html":{}}}],["controller('permissions",{"_index":630,"title":{},"body":{"controllers/PermissionsController.html":{}}}],["controller('roles",{"_index":778,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('users",{"_index":918,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GlobalController.html":{},"controllers/OwnerController.html":{},"modules/OwnerModule.html":{},"controllers/PermissionsController.html":{},"modules/PermissionsModule.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["controllers/auth.controller",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["controllers/owner.controller",{"_index":526,"title":{},"body":{"modules/OwnerModule.html":{}}}],["controllers/permissions.controller",{"_index":661,"title":{},"body":{"modules/PermissionsModule.html":{}}}],["controllers/roles.controller",{"_index":792,"title":{},"body":{"modules/RolesModule.html":{}}}],["controllers/users.controller",{"_index":932,"title":{},"body":{"modules/UsersModule.html":{}}}],["coverage",{"_index":978,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cp",{"_index":1124,"title":{},"body":{"index.html":{}}}],["create",{"_index":467,"title":{},"body":{"controllers/OwnerController.html":{},"injectables/OwnerService.html":{},"injectables/PermissionsService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":488,"title":{},"body":{"controllers/OwnerController.html":{}}}],["create(createownerdto",{"_index":469,"title":{},"body":{"controllers/OwnerController.html":{},"injectables/OwnerService.html":{}}}],["create(createroledto",{"_index":765,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["create(createuserdto",{"_index":896,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(registerpermissiondto",{"_index":675,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["create_owner",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["create_role",{"_index":1046,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["create_user",{"_index":1054,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["created_at",{"_index":494,"title":{},"body":{"entities/OwnerEntity.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["created_by",{"_index":744,"title":{},"body":{"entities/RoleEntity.html":{}}}],["createdatecolumn",{"_index":498,"title":{},"body":{"entities/OwnerEntity.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["createmainuser",{"_index":935,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmainuser(createmainuserdto",{"_index":942,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmainuserdto",{"_index":203,"title":{"classes/CreateMainUserDto.html":{}},"body":{"classes/CreateMainUserDto.html":{},"injectables/OwnerService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createowner",{"_index":535,"title":{},"body":{"injectables/OwnerService.html":{}}}],["createowner(singleownerdto",{"_index":545,"title":{},"body":{"injectables/OwnerService.html":{}}}],["createownerdto",{"_index":260,"title":{"classes/CreateOwnerDto.html":{}},"body":{"classes/CreateOwnerDto.html":{},"controllers/OwnerController.html":{},"injectables/OwnerService.html":{},"classes/Role.html":{},"coverage.html":{}}}],["createownerdto.address",{"_index":589,"title":{},"body":{"injectables/OwnerService.html":{}}}],["createownerdto.email",{"_index":588,"title":{},"body":{"injectables/OwnerService.html":{}}}],["createownerdto.lastname",{"_index":583,"title":{},"body":{"injectables/OwnerService.html":{}}}],["createownerdto.name",{"_index":582,"title":{},"body":{"injectables/OwnerService.html":{}}}],["createownerdto.nationalcode",{"_index":587,"title":{},"body":{"injectables/OwnerService.html":{}}}],["createownerdto.ownerdisplayname",{"_index":572,"title":{},"body":{"injectables/OwnerService.html":{}}}],["createownerdto.ownername",{"_index":571,"title":{},"body":{"injectables/OwnerService.html":{}}}],["createownerdto.password",{"_index":585,"title":{},"body":{"injectables/OwnerService.html":{}}}],["createownerdto.phonenumber",{"_index":586,"title":{},"body":{"injectables/OwnerService.html":{}}}],["createownerdto.username",{"_index":584,"title":{},"body":{"injectables/OwnerService.html":{}}}],["createowneruser",{"_index":536,"title":{},"body":{"injectables/OwnerService.html":{}}}],["createowneruser(createmainuserdto",{"_index":548,"title":{},"body":{"injectables/OwnerService.html":{}}}],["createparamdecorator",{"_index":877,"title":{},"body":{"interfaces/UserInfoType.html":{},"miscellaneous/variables.html":{}}}],["createquerybuilder('permissions",{"_index":706,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["createquerybuilder('users",{"_index":957,"title":{},"body":{"injectables/UsersService.html":{}}}],["createrole",{"_index":1045,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["createroledto",{"_index":285,"title":{"classes/CreateRoleDto.html":{}},"body":{"classes/CreateRoleDto.html":{},"classes/Permissions.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["createuser",{"_index":1053,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["createuserdto",{"_index":307,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/Role-3.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["ctx",{"_index":381,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/UserInfoType.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":384,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":383,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":883,"title":{},"body":{"interfaces/UserInfoType.html":{},"miscellaneous/variables.html":{}}}],["data's",{"_index":1100,"title":{},"body":{"index.html":{}}}],["database",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["databases",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["datas",{"_index":1134,"title":{},"body":{"index.html":{}}}],["date",{"_index":497,"title":{},"body":{"entities/OwnerEntity.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["date().toisostring",{"_index":392,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["debug",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["decode",{"_index":879,"title":{},"body":{"interfaces/UserInfoType.html":{},"dependencies.html":{}}}],["decodedtoken",{"_index":884,"title":{},"body":{"interfaces/UserInfoType.html":{},"miscellaneous/variables.html":{}}}],["decodedtoken.owner",{"_index":890,"title":{},"body":{"interfaces/UserInfoType.html":{},"miscellaneous/variables.html":{}}}],["decodedtoken.owner.id",{"_index":891,"title":{},"body":{"interfaces/UserInfoType.html":{},"miscellaneous/variables.html":{}}}],["decodedtoken.tokendata",{"_index":887,"title":{},"body":{"interfaces/UserInfoType.html":{},"miscellaneous/variables.html":{}}}],["decodedtoken.tokendata.id",{"_index":888,"title":{},"body":{"interfaces/UserInfoType.html":{},"miscellaneous/variables.html":{}}}],["decodetoken",{"_index":1014,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["decodetoken(request.headers.authorization",{"_index":885,"title":{},"body":{"interfaces/UserInfoType.html":{},"miscellaneous/variables.html":{}}}],["decodetoken(token",{"_index":880,"title":{},"body":{"interfaces/UserInfoType.html":{},"miscellaneous/functions.html":{}}}],["decorators",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"controllers/OwnerController.html":{},"entities/OwnerEntity.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"controllers/PermissionsController.html":{},"classes/RegisterPermissionDto.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateUserDto.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["defaultowner",{"_index":210,"title":{},"body":{"classes/CreateMainUserDto.html":{},"injectables/OwnerService.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["defaultsortby",{"_index":963,"title":{},"body":{"injectables/UsersService.html":{}}}],["defined",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/OwnerController.html":{},"entities/OwnerEntity.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["delete_owner",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete_role",{"_index":1048,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["delete_user",{"_index":1056,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["deleterole",{"_index":1047,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["deleteuser",{"_index":1055,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GlobalModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":964,"title":{},"body":{"injectables/UsersService.html":{}}}],["description",{"_index":289,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/OwnerService.html":{},"classes/Permissions.html":{},"entities/RoleEntity.html":{},"properties.html":{}}}],["development",{"_index":1089,"title":{},"body":{"index.html":{}}}],["dfferent",{"_index":1122,"title":{},"body":{"index.html":{}}}],["diffrent",{"_index":1098,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1115,"title":{},"body":{"index.html":{}}}],["displayname",{"_index":290,"title":{},"body":{"classes/CreateRoleDto.html":{},"entities/OwnerEntity.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/RegisterPermissionDto.html":{},"entities/RoleEntity.html":{},"classes/SingleOwnerDto.html":{},"miscellaneous/variables.html":{}}}],["divided",{"_index":1104,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1072,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":979,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentbuilder",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dotenv",{"_index":1026,"title":{},"body":{"dependencies.html":{}}}],["dtodata",{"_index":969,"title":{},"body":{"injectables/UsersService.html":{}}}],["dtos/create",{"_index":478,"title":{},"body":{"controllers/OwnerController.html":{},"injectables/OwnerService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/login.dto",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["e2e",{"_index":1146,"title":{},"body":{"index.html":{}}}],["eager",{"_index":596,"title":{},"body":{"entities/PermissionEntity.html":{},"entities/UserEntity.html":{}}}],["email",{"_index":211,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"injectables/OwnerService.html":{},"classes/Role.html":{},"classes/Role-3.html":{},"classes/SerializedUser.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["encryptpassword",{"_index":872,"title":{},"body":{"entities/UserEntity.html":{}}}],["entities",{"_index":492,"title":{},"body":{"entities/OwnerEntity.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"modules/PermissionsModule.html":{},"entities/RoleEntity.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/UserEntity.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["entities/userentity",{"_index":953,"title":{},"body":{"injectables/UsersService.html":{}}}],["entity",{"_index":490,"title":{"entities/OwnerEntity.html":{},"entities/PermissionEntity.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{}},"body":{"entities/OwnerEntity.html":{},"entities/PermissionEntity.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{},"coverage.html":{},"index.html":{}}}],["entity_name",{"_index":1154,"title":{},"body":{"index.html":{}}}],["entity_name.controller.spec.ts",{"_index":1156,"title":{},"body":{"index.html":{}}}],["entity_name.controller.ts",{"_index":1155,"title":{},"body":{"index.html":{}}}],["entity_name.e2e.tsto",{"_index":1168,"title":{},"body":{"index.html":{}}}],["entity_name.module.ts",{"_index":1166,"title":{},"body":{"index.html":{}}}],["entity_name.service.spec.ts",{"_index":1162,"title":{},"body":{"index.html":{}}}],["entity_name.service.ts",{"_index":1161,"title":{},"body":{"index.html":{}}}],["entity_name.ts",{"_index":1158,"title":{},"body":{"index.html":{}}}],["enumerations",{"_index":1043,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["env.example",{"_index":1125,"title":{},"body":{"index.html":{}}}],["enviroment",{"_index":1123,"title":{},"body":{"index.html":{}}}],["envthen",{"_index":1126,"title":{},"body":{"index.html":{}}}],["errorsinterceptor",{"_index":325,"title":{"injectables/ErrorsInterceptor.html":{}},"body":{"injectables/ErrorsInterceptor.html":{},"coverage.html":{}}}],["etc",{"_index":1092,"title":{},"body":{"index.html":{}}}],["exception",{"_index":375,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":386,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":394,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":369,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptions.filter",{"_index":911,"title":{},"body":{"controllers/UsersController.html":{}}}],["exceptions.filter.ts",{"_index":368,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exceptions.filter.ts:6",{"_index":374,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":825,"title":{},"body":{"classes/SerializedUser.html":{},"entities/UserEntity.html":{}}}],["executioncontext",{"_index":329,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"guards/PermissionsGaurd.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserInfoType.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/ErrorsInterceptor.html":{},"controllers/GlobalController.html":{},"modules/GlobalModule.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/OwnerController.html":{},"entities/OwnerEntity.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"interfaces/Response.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{},"modules/GlobalModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":379,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":409,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":423,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":431,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":227,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/GlobalService.html":{},"injectables/JwtStrategy.html":{},"classes/Role-3.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["feature",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["file",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/ErrorsInterceptor.html":{},"controllers/GlobalController.html":{},"modules/GlobalModule.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/OwnerController.html":{},"entities/OwnerEntity.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"interfaces/Response.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["find",{"_index":1170,"title":{},"body":{"index.html":{}}}],["findbyid",{"_index":537,"title":{},"body":{"injectables/OwnerService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":550,"title":{},"body":{"injectables/OwnerService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findpermissionbykey",{"_index":669,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["findpermissionbykey(key",{"_index":678,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["finduserbyusername",{"_index":936,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyusername(username",{"_index":945,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":1117,"title":{},"body":{"index.html":{}}}],["following",{"_index":1118,"title":{},"body":{"index.html":{}}}],["found",{"_index":785,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["fs",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["full",{"_index":1069,"title":{},"body":{"index.html":{}}}],["function",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"interfaces/UserInfoType.html":{},"coverage.html":{}}}],["functions",{"_index":1061,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fundumental",{"_index":1083,"title":{},"body":{"index.html":{}}}],["generateappconfig",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["generator",{"_index":1169,"title":{},"body":{"index.html":{}}}],["get('/currentuserpermissions",{"_index":623,"title":{},"body":{"controllers/PermissionsController.html":{}}}],["get('/getcurrent",{"_index":901,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/search",{"_index":484,"title":{},"body":{"controllers/OwnerController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["get('/search/:id",{"_index":922,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(/search/:id",{"_index":768,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(`/search/:id",{"_index":781,"title":{},"body":{"controllers/RolesController.html":{}}}],["getcurrentuser",{"_index":895,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getcurrentuser(@userandownerinfo",{"_index":926,"title":{},"body":{"controllers/UsersController.html":{}}}],["getcurrentuser(userid",{"_index":947,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcurrentuser(userinfo",{"_index":900,"title":{},"body":{"controllers/UsersController.html":{}}}],["getcurrentuserpermissions",{"_index":620,"title":{},"body":{"controllers/PermissionsController.html":{}}}],["getcurrentuserpermissions(@userandownerinfo",{"_index":631,"title":{},"body":{"controllers/PermissionsController.html":{}}}],["getcurrentuserpermissions(userinfo",{"_index":621,"title":{},"body":{"controllers/PermissionsController.html":{}}}],["getcurrentuserroles",{"_index":937,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcurrentuserroles(userid",{"_index":949,"title":{},"body":{"injectables/UsersService.html":{}}}],["getone",{"_index":710,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["getpermissionkeys",{"_index":670,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["getpermissionkeys(permissions",{"_index":680,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["getrolepermissions",{"_index":797,"title":{},"body":{"injectables/RolesService.html":{}}}],["getrolepermissions(id",{"_index":803,"title":{},"body":{"injectables/RolesService.html":{}}}],["getting",{"_index":1067,"title":{"index.html":{}},"body":{}}],["getuserinfofunc",{"_index":644,"title":{},"body":{"guards/PermissionsGaurd.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getuserinfofunc(request.headers.authorization",{"_index":648,"title":{},"body":{"guards/PermissionsGaurd.html":{}}}],["getuserinfofunc(token",{"_index":892,"title":{},"body":{"interfaces/UserInfoType.html":{},"miscellaneous/functions.html":{}}}],["getuserpermissions",{"_index":671,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["getuserpermissions(userid",{"_index":682,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["global",{"_index":347,"title":{},"body":{"controllers/GlobalController.html":{},"modules/GlobalModule.html":{},"modules/PermissionsModule.html":{}}}],["global/global.module",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["global_service",{"_index":353,"title":{},"body":{"modules/GlobalModule.html":{}}}],["globalcontroller",{"_index":345,"title":{"controllers/GlobalController.html":{}},"body":{"controllers/GlobalController.html":{},"coverage.html":{}}}],["globalmodule",{"_index":8,"title":{"modules/GlobalModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GlobalModule.html":{},"modules.html":{},"overview.html":{}}}],["globalservice",{"_index":165,"title":{"injectables/GlobalService.html":{}},"body":{"injectables/AuthService.html":{},"modules/GlobalModule.html":{},"injectables/GlobalService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["guard",{"_index":635,"title":{"guards/PermissionsGaurd.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":637,"title":{},"body":{"guards/PermissionsGaurd.html":{}}}],["handle",{"_index":342,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["hint",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["host",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":382,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":372,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["httpexception('user",{"_index":784,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["httpexceptionfilter",{"_index":366,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["httpstatus",{"_index":772,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.not_found",{"_index":786,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["id",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"entities/OwnerEntity.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"classes/RegisterPermissionDto.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":980,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":432,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":341,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"modules/OwnerModule.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"interfaces/Response.html":{},"modules/RolesModule.html":{},"injectables/TransformInterceptor.html":{},"modules/UsersModule.html":{}}}],["import",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/ErrorsInterceptor.html":{},"controllers/GlobalController.html":{},"modules/GlobalModule.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/OwnerController.html":{},"entities/OwnerEntity.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"interfaces/Response.html":{},"classes/Role.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":90,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/OwnerController.html":{},"entities/OwnerEntity.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"interfaces/Response.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index.ts",{"_index":1157,"title":{},"body":{"index.html":{}}}],["info",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/ErrorsInterceptor.html":{},"controllers/GlobalController.html":{},"modules/GlobalModule.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/OwnerController.html":{},"entities/OwnerEntity.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"interfaces/Response.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/OwnerController.html":{},"injectables/OwnerService.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"injectables/PermissionsService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["inject('auth_service",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{}}}],["inject('global_service",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["inject('owner_service",{"_index":483,"title":{},"body":{"controllers/OwnerController.html":{}}}],["inject('permission_service",{"_index":560,"title":{},"body":{"injectables/OwnerService.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{}}}],["inject('roles_service",{"_index":559,"title":{},"body":{"injectables/OwnerService.html":{},"injectables/PermissionsService.html":{},"controllers/RolesController.html":{}}}],["inject('user_service",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OwnerService.html":{},"injectables/PermissionsService.html":{},"controllers/UsersController.html":{}}}],["injectable",{"_index":159,"title":{"injectables/AuthService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/GlobalService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/OwnerService.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/GlobalService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/OwnerService.html":{},"guards/PermissionsGaurd.html":{},"injectables/PermissionsService.html":{},"interfaces/Response.html":{},"injectables/RolesService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/GlobalService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/OwnerService.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":553,"title":{},"body":{"injectables/OwnerService.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(ownerentity",{"_index":558,"title":{},"body":{"injectables/OwnerService.html":{}}}],["injectrepository(permissionentity",{"_index":686,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["injectrepository(roleentity",{"_index":807,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(userentity",{"_index":954,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":1077,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1106,"title":{},"body":{"index.html":{}}}],["installing",{"_index":1112,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1116,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":327,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(_context",{"_index":328,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":718,"title":{"interfaces/Response.html":{},"interfaces/UserInfoType.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserInfoType.html":{},"coverage.html":{}}}],["interfaces",{"_index":719,"title":{},"body":{"interfaces/Response.html":{},"interfaces/UserInfoType.html":{},"overview.html":{}}}],["is_public_key",{"_index":408,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":250,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/Permissions.html":{},"classes/RegisterPermissionDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{}}}],["isarray()@arrayminsize(1",{"_index":244,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["isemail",{"_index":247,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{}}}],["ismainuser",{"_index":212,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/OwnerService.html":{},"classes/Role-3.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["ismatch",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":221,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/Permissions.html":{},"classes/RegisterPermissionDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{},"classes/SingleOwnerDto.html":{}}}],["isnotempty()@isemail",{"_index":223,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["isnotempty()@isphonenumber('ir",{"_index":241,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["isnotempty()@length(0",{"_index":832,"title":{},"body":{"classes/SingleOwnerDto.html":{}}}],["isnotempty()@length(8",{"_index":238,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["isoptional",{"_index":228,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/Permissions.html":{},"classes/RegisterPermissionDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{}}}],["isoptional()@isarray",{"_index":713,"title":{},"body":{"classes/RegisterPermissionDto.html":{}}}],["isoptional()@length(0",{"_index":218,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["isoptional()@length(10",{"_index":234,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["isoptional()@length(5",{"_index":230,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["isowner",{"_index":360,"title":{},"body":{"injectables/GlobalService.html":{}}}],["isphonenumber",{"_index":248,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{}}}],["isphonenumber('ir",{"_index":256,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{}}}],["ispublic",{"_index":413,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["items",{"_index":317,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Role-3.html":{}}}],["joincolumn",{"_index":758,"title":{},"body":{"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["jointable",{"_index":760,"title":{},"body":{"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["js",{"_index":1082,"title":{},"body":{"index.html":{}}}],["json",{"_index":389,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["json.stringify(req.body",{"_index":461,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["jwt",{"_index":426,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserInfoType.html":{},"dependencies.html":{}}}],["jwt_decode",{"_index":878,"title":{},"body":{"interfaces/UserInfoType.html":{}}}],["jwt_decode(token",{"_index":881,"title":{},"body":{"interfaces/UserInfoType.html":{}}}],["jwtauthguard",{"_index":397,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["jwtconstants",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":430,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":134,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":301,"title":{},"body":{"classes/CreateRoleDto.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"miscellaneous/variables.html":{}}}],["keys",{"_index":696,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["keys.concat(childpermission.key",{"_index":701,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["keys.concat(grandchild.key",{"_index":704,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["keys.concat(rootpermission.key",{"_index":698,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["khani",{"_index":1176,"title":{},"body":{"index.html":{}}}],["khanigargantua",{"_index":1179,"title":{},"body":{"index.html":{}}}],["knowladge",{"_index":1171,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":213,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"injectables/OwnerService.html":{},"classes/Role.html":{},"classes/Role-3.html":{},"classes/SerializedUser.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["latest",{"_index":1109,"title":{},"body":{"index.html":{}}}],["leftjoinandselect('permissions.children",{"_index":707,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["leftjoinandselect('permissions.parent",{"_index":708,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["leftjoinandselect('users.owners",{"_index":958,"title":{},"body":{"injectables/UsersService.html":{}}}],["length",{"_index":249,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{},"classes/SingleOwnerDto.html":{}}}],["length(0",{"_index":259,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{},"classes/SingleOwnerDto.html":{}}}],["length(10",{"_index":257,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{}}}],["length(4",{"_index":322,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/Role-3.html":{}}}],["length(5",{"_index":254,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{}}}],["length(8",{"_index":255,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{}}}],["license",{"_index":1180,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1182,"title":{},"body":{"index.html":{}}}],["line",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["linkedin",{"_index":1177,"title":{},"body":{"index.html":{}}}],["literal",{"_index":876,"title":{},"body":{"interfaces/UserInfoType.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["load_role",{"_index":1050,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["load_user",{"_index":1058,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["loadrole",{"_index":1049,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["loaduser",{"_index":1057,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["local",{"_index":442,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localstrategy",{"_index":135,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["loggedinuserpermissions",{"_index":652,"title":{},"body":{"guards/PermissionsGaurd.html":{}}}],["loggedinuserpermissions.includes(permission",{"_index":654,"title":{},"body":{"guards/PermissionsGaurd.html":{}}}],["logger",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermiddleware",{"_index":446,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"injectables/LoggerMiddleware.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["logging",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logininfo",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":95,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logininfo",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["main",{"_index":206,"title":{},"body":{"classes/CreateMainUserDto.html":{},"injectables/OwnerService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mainpermission",{"_index":574,"title":{},"body":{"injectables/OwnerService.html":{}}}],["mainuser",{"_index":563,"title":{},"body":{"injectables/OwnerService.html":{}}}],["manytomany",{"_index":759,"title":{},"body":{"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["manytomany(undefined",{"_index":859,"title":{},"body":{"entities/UserEntity.html":{}}}],["manytomany(undefined)@jointable",{"_index":754,"title":{},"body":{"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["manytoone",{"_index":606,"title":{},"body":{"entities/PermissionEntity.html":{}}}],["manytoone(undefined",{"_index":603,"title":{},"body":{"entities/PermissionEntity.html":{}}}],["map",{"_index":723,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["matching",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/ErrorsInterceptor.html":{},"controllers/GlobalController.html":{},"modules/GlobalModule.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/OwnerController.html":{},"entities/OwnerEntity.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"interfaces/Response.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":393,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["metadata",{"_index":1036,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":459,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["methods",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/OwnerController.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["middlewares",{"_index":1151,"title":{},"body":{"index.html":{}}}],["middlewares/logger.middleware",{"_index":525,"title":{},"body":{"modules/OwnerModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["minimum",{"_index":1086,"title":{},"body":{"index.html":{}}}],["minitems",{"_index":304,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/Permissions.html":{}}}],["miscellaneous",{"_index":1042,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1181,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mode",{"_index":1141,"title":{},"body":{"index.html":{}}}],["modes",{"_index":1137,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GlobalModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GlobalModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GlobalModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mohammad",{"_index":1175,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":1097,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql2",{"_index":1029,"title":{},"body":{"dependencies.html":{}}}],["n",{"_index":457,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["name",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/OwnerController.html":{},"entities/OwnerEntity.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["nationalcode",{"_index":214,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"injectables/OwnerService.html":{},"classes/Role.html":{},"classes/Role-3.html":{},"classes/SerializedUser.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":1108,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1081,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":335,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":914,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ErrorsInterceptor.html":{},"controllers/GlobalController.html":{},"modules/GlobalModule.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/OwnerController.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"interfaces/Response.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":407,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionsGaurd.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1021,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"controllers/OwnerController.html":{},"classes/Permissions.html":{},"controllers/PermissionsController.html":{},"classes/Role.html":{},"classes/Role-3.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":454,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nestmodule",{"_index":522,"title":{},"body":{"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["new",{"_index":344,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalStrategy.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newowner",{"_index":566,"title":{},"body":{"injectables/OwnerService.html":{}}}],["newowner.id",{"_index":581,"title":{},"body":{"injectables/OwnerService.html":{}}}],["newrole",{"_index":577,"title":{},"body":{"injectables/OwnerService.html":{},"injectables/RolesService.html":{}}}],["newrole.id",{"_index":590,"title":{},"body":{"injectables/OwnerService.html":{}}}],["newuser",{"_index":970,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":330,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map((result",{"_index":725,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nextfunction",{"_index":451,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["node",{"_index":1111,"title":{},"body":{"index.html":{}}}],["now",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["npm",{"_index":1076,"title":{},"body":{"index.html":{}}}],["null",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OwnerService.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":302,"title":{},"body":{"classes/CreateRoleDto.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["number",{"_index":253,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/GlobalService.html":{},"entities/OwnerEntity.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":323,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Role-3.html":{},"miscellaneous/variables.html":{}}}],["object.assign(this",{"_index":831,"title":{},"body":{"classes/SerializedUser.html":{}}}],["observable",{"_index":334,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["one",{"_index":1073,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":511,"title":{},"body":{"entities/OwnerEntity.html":{},"entities/PermissionEntity.html":{}}}],["onetomany(undefined",{"_index":508,"title":{},"body":{"entities/OwnerEntity.html":{},"entities/PermissionEntity.html":{}}}],["onetoone",{"_index":757,"title":{},"body":{"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["onetoone(undefined)@joincolumn",{"_index":747,"title":{},"body":{"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["optional",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/OwnerController.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["order",{"_index":1070,"title":{},"body":{"index.html":{}}}],["out",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GlobalModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1187,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"controllers/OwnerController.html":{},"injectables/OwnerService.html":{},"entities/RoleEntity.html":{},"injectables/RolesService.html":{},"interfaces/UserInfoType.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["owner's",{"_index":1102,"title":{},"body":{"index.html":{}}}],["owner.dto",{"_index":479,"title":{},"body":{"controllers/OwnerController.html":{},"injectables/OwnerService.html":{}}}],["owner.dto.ts",{"_index":262,"title":{},"body":{"classes/CreateOwnerDto.html":{},"classes/Role.html":{},"classes/SingleOwnerDto.html":{},"coverage.html":{}}}],["owner.dto.ts:10",{"_index":833,"title":{},"body":{"classes/SingleOwnerDto.html":{}}}],["owner.dto.ts:13",{"_index":726,"title":{},"body":{"classes/Role.html":{}}}],["owner.dto.ts:14",{"_index":727,"title":{},"body":{"classes/Role.html":{}}}],["owner.dto.ts:20",{"_index":271,"title":{},"body":{"classes/CreateOwnerDto.html":{}}}],["owner.dto.ts:25",{"_index":270,"title":{},"body":{"classes/CreateOwnerDto.html":{}}}],["owner.dto.ts:29",{"_index":282,"title":{},"body":{"classes/CreateOwnerDto.html":{}}}],["owner.dto.ts:34",{"_index":278,"title":{},"body":{"classes/CreateOwnerDto.html":{}}}],["owner.dto.ts:39",{"_index":280,"title":{},"body":{"classes/CreateOwnerDto.html":{}}}],["owner.dto.ts:44",{"_index":273,"title":{},"body":{"classes/CreateOwnerDto.html":{}}}],["owner.dto.ts:49",{"_index":268,"title":{},"body":{"classes/CreateOwnerDto.html":{}}}],["owner.dto.ts:54",{"_index":266,"title":{},"body":{"classes/CreateOwnerDto.html":{}}}],["owner.dto.ts:59",{"_index":276,"title":{},"body":{"classes/CreateOwnerDto.html":{}}}],["owner.dto.ts:6",{"_index":834,"title":{},"body":{"classes/SingleOwnerDto.html":{}}}],["owner.dto.ts:64",{"_index":275,"title":{},"body":{"classes/CreateOwnerDto.html":{}}}],["owner/owner.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["owner_general",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["owner_id",{"_index":1105,"title":{},"body":{"index.html":{}}}],["owner_service",{"_index":532,"title":{},"body":{"modules/OwnerModule.html":{}}}],["ownercontroller",{"_index":465,"title":{"controllers/OwnerController.html":{}},"body":{"controllers/OwnerController.html":{},"modules/OwnerModule.html":{},"coverage.html":{}}}],["ownerdisplayname",{"_index":263,"title":{},"body":{"classes/CreateOwnerDto.html":{},"classes/Role.html":{}}}],["ownerentities",{"_index":992,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ownerentity",{"_index":491,"title":{"entities/OwnerEntity.html":{}},"body":{"entities/OwnerEntity.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ownerid",{"_index":357,"title":{},"body":{"injectables/GlobalService.html":{},"injectables/OwnerService.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["ownermodule",{"_index":9,"title":{"modules/OwnerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OwnerModule.html":{},"modules.html":{},"overview.html":{}}}],["ownername",{"_index":264,"title":{},"body":{"classes/CreateOwnerDto.html":{},"classes/Role.html":{}}}],["ownerpermissions",{"_index":995,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ownerrepository",{"_index":543,"title":{},"body":{"injectables/OwnerService.html":{}}}],["owners",{"_index":215,"title":{},"body":{"classes/CreateMainUserDto.html":{},"injectables/OwnerService.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["ownerservice",{"_index":476,"title":{"injectables/OwnerService.html":{}},"body":{"controllers/OwnerController.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"coverage.html":{},"overview.html":{}}}],["package",{"_index":1017,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["paginate",{"_index":913,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["paginate(query",{"_index":960,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginatequery",{"_index":904,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param",{"_index":773,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":782,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/OwnerController.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":303,"title":{},"body":{"classes/CreateRoleDto.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"injectables/RolesService.html":{},"miscellaneous/typealiases.html":{}}}],["parseint(process.env.mysql_port",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["parseint(process.env.mysql_port_test",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["parseint(record.owner.id",{"_index":365,"title":{},"body":{"injectables/GlobalService.html":{}}}],["parseint(singleowner.id",{"_index":363,"title":{},"body":{"injectables/GlobalService.html":{}}}],["parseintpipe",{"_index":774,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["partial",{"_index":817,"title":{},"body":{"classes/SerializedUser.html":{}}}],["passport",{"_index":425,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":427,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":429,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/OwnerService.html":{},"classes/Role.html":{},"classes/Role-3.html":{},"classes/SerializedUser.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["path",{"_index":395,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{}}}],["payload",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":435,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":436,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":593,"title":{},"body":{"entities/PermissionEntity.html":{}}}],["permission.children",{"_index":604,"title":{},"body":{"entities/PermissionEntity.html":{}}}],["permission.dto",{"_index":685,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["permission.dto.ts",{"_index":711,"title":{},"body":{"classes/RegisterPermissionDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["permission.dto.ts:16",{"_index":716,"title":{},"body":{"classes/RegisterPermissionDto.html":{}}}],["permission.dto.ts:19",{"_index":715,"title":{},"body":{"classes/RegisterPermissionDto.html":{}}}],["permission.dto.ts:22",{"_index":717,"title":{},"body":{"classes/RegisterPermissionDto.html":{}}}],["permission.dto.ts:26",{"_index":714,"title":{},"body":{"classes/RegisterPermissionDto.html":{}}}],["permission.parent",{"_index":594,"title":{},"body":{"entities/PermissionEntity.html":{}}}],["permission_service",{"_index":666,"title":{},"body":{"modules/PermissionsModule.html":{}}}],["permissionentities",{"_index":998,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissionentity",{"_index":297,"title":{"entities/PermissionEntity.html":{}},"body":{"classes/CreateRoleDto.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"entities/RoleEntity.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissionenums",{"_index":915,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["permissionrepository",{"_index":674,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["permissions",{"_index":291,"title":{"classes/Permissions.html":{},"classes/Permissions-1.html":{}},"body":{"classes/CreateRoleDto.html":{},"injectables/OwnerService.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"controllers/PermissionsController.html":{},"injectables/PermissionsService.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"entities/RoleEntity.html":{},"injectables/RolesService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["permissions.foreach((rootpermission",{"_index":697,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["permissions.ts",{"_index":1159,"title":{},"body":{"index.html":{}}}],["permissions/permissions",{"_index":916,"title":{},"body":{"controllers/UsersController.html":{}}}],["permissions/permissions.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["permissions_key",{"_index":642,"title":{},"body":{"guards/PermissionsGaurd.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissionscontroller",{"_index":618,"title":{"controllers/PermissionsController.html":{}},"body":{"controllers/PermissionsController.html":{},"modules/PermissionsModule.html":{},"coverage.html":{}}}],["permissionsgaurd",{"_index":636,"title":{"guards/PermissionsGaurd.html":{}},"body":{"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["permissionsmodule",{"_index":10,"title":{"modules/PermissionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules.html":{},"overview.html":{}}}],["permissionsservice",{"_index":541,"title":{"injectables/PermissionsService.html":{}},"body":{"injectables/OwnerService.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"coverage.html":{},"overview.html":{}}}],["phonenumber",{"_index":216,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"injectables/OwnerService.html":{},"classes/Role.html":{},"classes/Role-3.html":{},"classes/SerializedUser.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["pipe(catcherror((_err",{"_index":343,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["place",{"_index":1074,"title":{},"body":{"index.html":{}}}],["port",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OwnerController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["post('/create",{"_index":486,"title":{},"body":{"controllers/OwnerController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["post('/create')@usepipes(validationpipe",{"_index":766,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GlobalController.html":{},"controllers/OwnerController.html":{},"controllers/PermissionsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":512,"title":{},"body":{"entities/OwnerEntity.html":{},"entities/PermissionEntity.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["primarygeneratedcolumn({type",{"_index":502,"title":{},"body":{"entities/OwnerEntity.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["principles",{"_index":1096,"title":{},"body":{"index.html":{}}}],["private",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/OwnerController.html":{},"injectables/OwnerService.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"injectables/PermissionsService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process.env.mode",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.mode.trimend",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.mysql_database",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.mysql_database_test",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.mysql_host",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.mysql_host_test",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.mysql_password",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.mysql_password_test",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.mysql_username",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.mysql_username_test",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["project",{"_index":1114,"title":{},"body":{"index.html":{}}}],["promise",{"_index":641,"title":{},"body":{"guards/PermissionsGaurd.html":{}}}],["properties",{"_index":208,"title":{"properties.html":{}},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/OwnerEntity.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"classes/RegisterPermissionDto.html":{},"interfaces/Response.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"interfaces/UserInfoType.html":{},"properties.html":{}}}],["provide",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{},"modules/GlobalModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GlobalModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OwnerController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('/create')@usepipes(validationpipe",{"_index":470,"title":{},"body":{"controllers/OwnerController.html":{}}}],["query",{"_index":903,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["querybuilder",{"_index":955,"title":{},"body":{"injectables/UsersService.html":{}}}],["readonly",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/OwnerController.html":{},"injectables/OwnerService.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"injectables/PermissionsService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":359,"title":{},"body":{"injectables/GlobalService.html":{}}}],["record.owner",{"_index":364,"title":{},"body":{"injectables/GlobalService.html":{}}}],["record.owners.map((singleowner",{"_index":362,"title":{},"body":{"injectables/GlobalService.html":{}}}],["record.owners?.length",{"_index":361,"title":{},"body":{"injectables/GlobalService.html":{}}}],["reflect",{"_index":1035,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":402,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionsGaurd.html":{}}}],["registerpermissiondto",{"_index":676,"title":{"classes/RegisterPermissionDto.html":{}},"body":{"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["relations",{"_index":562,"title":{},"body":{"injectables/OwnerService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":539,"title":{},"body":{"injectables/OwnerService.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":453,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.method",{"_index":455,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.route.path",{"_index":458,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["request",{"_index":377,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"guards/PermissionsGaurd.html":{},"interfaces/UserInfoType.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":396,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["required",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/Role-3.html":{},"index.html":{}}}],["requiredpermissions",{"_index":645,"title":{},"body":{"guards/PermissionsGaurd.html":{}}}],["requiredpermissions.some((permission",{"_index":653,"title":{},"body":{"guards/PermissionsGaurd.html":{}}}],["requirements",{"_index":1087,"title":{},"body":{"index.html":{}}}],["requirepermissions",{"_index":912,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requirepermissions(permissionenums.loaduser",{"_index":920,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GlobalModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":378,"title":{"interfaces/Response.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["result",{"_index":721,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{}}}],["result.links",{"_index":965,"title":{},"body":{"injectables/UsersService.html":{}}}],["results",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/ErrorsInterceptor.html":{},"controllers/GlobalController.html":{},"modules/GlobalModule.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/OwnerController.html":{},"entities/OwnerEntity.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"interfaces/Response.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/GlobalService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/OwnerController.html":{},"injectables/OwnerService.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"injectables/PermissionsService.html":{},"interfaces/Response.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/OwnerController.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":1038,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":243,"title":{"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{}},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"injectables/OwnerService.html":{},"injectables/PermissionsService.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["role.dto",{"_index":776,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["role.dto.ts",{"_index":287,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/Permissions.html":{},"coverage.html":{}}}],["role.dto.ts:12",{"_index":295,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:18",{"_index":299,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:22",{"_index":293,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:26",{"_index":294,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:31",{"_index":610,"title":{},"body":{"classes/Permissions.html":{}}}],["role.dto.ts:33",{"_index":611,"title":{},"body":{"classes/Permissions.html":{}}}],["role.dto.ts:35",{"_index":609,"title":{},"body":{"classes/Permissions.html":{}}}],["role.dto.ts:39",{"_index":613,"title":{},"body":{"classes/Permissions.html":{}}}],["role.dto.ts:44",{"_index":608,"title":{},"body":{"classes/Permissions.html":{}}}],["role.dto.ts:8",{"_index":296,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.id",{"_index":693,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["role.permissions",{"_index":813,"title":{},"body":{"injectables/RolesService.html":{}}}],["role_general",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roleentities",{"_index":1002,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleentity",{"_index":742,"title":{"entities/RoleEntity.html":{}},"body":{"entities/RoleEntity.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"entities/UserEntity.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolepermissions",{"_index":691,"title":{},"body":{"injectables/PermissionsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolerepository",{"_index":800,"title":{},"body":{"injectables/RolesService.html":{}}}],["roles",{"_index":217,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/OwnerService.html":{},"classes/Role-3.html":{},"controllers/RolesController.html":{},"classes/SerializedUser.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roles/roles.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["roles_service",{"_index":794,"title":{},"body":{"modules/RolesModule.html":{}}}],["rolescontroller",{"_index":763,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":11,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesservice",{"_index":540,"title":{"injectables/RolesService.html":{}},"body":{"injectables/OwnerService.html":{},"injectables/PermissionsService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["rootpermission.children",{"_index":699,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["rootpermission.children.foreach((childpermission",{"_index":700,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["run",{"_index":1079,"title":{},"body":{"index.html":{}}}],["runing",{"_index":1075,"title":{},"body":{"index.html":{}}}],["running",{"_index":1107,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":338,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":340,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["same",{"_index":1103,"title":{},"body":{"index.html":{}}}],["savedowner",{"_index":568,"title":{},"body":{"injectables/OwnerService.html":{}}}],["saveduser",{"_index":972,"title":{},"body":{"injectables/UsersService.html":{}}}],["search",{"_index":468,"title":{},"body":{"controllers/OwnerController.html":{},"injectables/OwnerService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["search(@userandownerinfo",{"_index":779,"title":{},"body":{"controllers/RolesController.html":{}}}],["search(ownerid",{"_index":805,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["search(userinfo",{"_index":770,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["searchablecolumns",{"_index":962,"title":{},"body":{"injectables/UsersService.html":{}}}],["secret",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":433,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":1071,"title":{},"body":{"index.html":{}}}],["seed",{"_index":1127,"title":{},"body":{"index.html":{}}}],["seed:run:testto",{"_index":1135,"title":{},"body":{"index.html":{}}}],["seed:runin",{"_index":1133,"title":{},"body":{"index.html":{}}}],["seeds",{"_index":1091,"title":{},"body":{"index.html":{}}}],["select",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["sendinginfo",{"_index":886,"title":{},"body":{"interfaces/UserInfoType.html":{},"miscellaneous/variables.html":{}}}],["serializeduser",{"_index":814,"title":{"classes/SerializedUser.html":{}},"body":{"classes/SerializedUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["serializeduser(user",{"_index":968,"title":{},"body":{"injectables/UsersService.html":{}}}],["serve",{"_index":1136,"title":{},"body":{"index.html":{}}}],["service",{"_index":1095,"title":{},"body":{"index.html":{}}}],["services",{"_index":1160,"title":{},"body":{"index.html":{}}}],["services/auth.service",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["services/global.service",{"_index":352,"title":{},"body":{"modules/GlobalModule.html":{}}}],["services/owner.service",{"_index":477,"title":{},"body":{"controllers/OwnerController.html":{},"modules/OwnerModule.html":{}}}],["services/permissions.service",{"_index":626,"title":{},"body":{"controllers/PermissionsController.html":{},"modules/PermissionsModule.html":{}}}],["services/roles.service",{"_index":775,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["services/users.service",{"_index":910,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["set",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["setdescription('swagger",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(permissions_key",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settitle('fs",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setversion('1.0",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["show",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["show_owner",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["single",{"_index":554,"title":{},"body":{"injectables/OwnerService.html":{},"classes/SingleOwnerDto.html":{},"coverage.html":{}}}],["singleownerdto",{"_index":546,"title":{"classes/SingleOwnerDto.html":{}},"body":{"injectables/OwnerService.html":{},"classes/SingleOwnerDto.html":{},"coverage.html":{}}}],["software",{"_index":1094,"title":{},"body":{"index.html":{}}}],["sortablecolumns",{"_index":961,"title":{},"body":{"injectables/UsersService.html":{}}}],["source",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/ErrorsInterceptor.html":{},"controllers/GlobalController.html":{},"modules/GlobalModule.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/OwnerController.html":{},"entities/OwnerEntity.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"interfaces/Response.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["specify",{"_index":1120,"title":{},"body":{"index.html":{}}}],["src",{"_index":1150,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":1065,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1197,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../index.ts",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1062,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../permission.decorator.ts",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../permissions.ts",{"_index":1044,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../public.meta.ts",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../register",{"_index":1196,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../sampleseed.ts",{"_index":1063,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../swagger.config.ts",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1064,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/auth/auth.module.ts",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/controllers/auth.controller.ts",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/controllers/auth.controller.ts:18",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/dtos/login.dto.ts",{"_index":462,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.dto.ts:13",{"_index":463,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dtos/login.dto.ts:8",{"_index":464,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/jwt",{"_index":398,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["src/auth/permissions.guard",{"_index":663,"title":{},"body":{"modules/PermissionsModule.html":{},"modules/UsersModule.html":{}}}],["src/auth/permissions.guard.ts",{"_index":638,"title":{},"body":{"guards/PermissionsGaurd.html":{},"coverage.html":{}}}],["src/auth/permissions.guard.ts:13",{"_index":639,"title":{},"body":{"guards/PermissionsGaurd.html":{}}}],["src/auth/permissions.guard.ts:20",{"_index":640,"title":{},"body":{"guards/PermissionsGaurd.html":{}}}],["src/auth/services/auth.service.ts",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/services/auth.service.ts:14",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/services/auth.service.ts:27",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/services/auth.service.ts:8",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/utils/constants.ts",{"_index":988,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/utils/jwt.strategy.ts",{"_index":418,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/utils/jwt.strategy.ts:16",{"_index":422,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/utils/jwt.strategy.ts:7",{"_index":420,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/utils/localstrategy.ts",{"_index":437,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/utils/localstrategy.ts:14",{"_index":441,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/utils/localstrategy.ts:7",{"_index":439,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/exceptionhandler/http",{"_index":367,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/global/controllers/global.controller.ts",{"_index":346,"title":{},"body":{"controllers/GlobalController.html":{},"coverage.html":{}}}],["src/global/global.module.ts",{"_index":351,"title":{},"body":{"modules/GlobalModule.html":{}}}],["src/global/services/global.service",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["src/global/services/global.service.ts",{"_index":354,"title":{},"body":{"injectables/GlobalService.html":{},"coverage.html":{}}}],["src/global/services/global.service.ts:5",{"_index":358,"title":{},"body":{"injectables/GlobalService.html":{}}}],["src/main.ts",{"_index":990,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middlewares/logger.middleware",{"_index":664,"title":{},"body":{"modules/PermissionsModule.html":{}}}],["src/middlewares/logger.middleware.ts",{"_index":447,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/middlewares/logger.middleware.ts:6",{"_index":452,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/owner/controllers/owner.controller.ts",{"_index":466,"title":{},"body":{"controllers/OwnerController.html":{},"coverage.html":{}}}],["src/owner/controllers/owner.controller.ts:24",{"_index":473,"title":{},"body":{"controllers/OwnerController.html":{}}}],["src/owner/controllers/owner.controller.ts:31",{"_index":471,"title":{},"body":{"controllers/OwnerController.html":{}}}],["src/owner/dtos/create",{"_index":261,"title":{},"body":{"classes/CreateOwnerDto.html":{},"classes/Role.html":{},"classes/SingleOwnerDto.html":{},"coverage.html":{}}}],["src/owner/entities",{"_index":762,"title":{},"body":{"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["src/owner/entities/index.ts",{"_index":991,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/owner/entities/ownerentity.ts",{"_index":493,"title":{},"body":{"entities/OwnerEntity.html":{},"coverage.html":{}}}],["src/owner/entities/ownerentity.ts:16",{"_index":504,"title":{},"body":{"entities/OwnerEntity.html":{}}}],["src/owner/entities/ownerentity.ts:19",{"_index":505,"title":{},"body":{"entities/OwnerEntity.html":{}}}],["src/owner/entities/ownerentity.ts:22",{"_index":501,"title":{},"body":{"entities/OwnerEntity.html":{}}}],["src/owner/entities/ownerentity.ts:25",{"_index":510,"title":{},"body":{"entities/OwnerEntity.html":{}}}],["src/owner/entities/ownerentity.ts:28",{"_index":499,"title":{},"body":{"entities/OwnerEntity.html":{}}}],["src/owner/entities/ownerentity.ts:31",{"_index":507,"title":{},"body":{"entities/OwnerEntity.html":{}}}],["src/owner/owner.module.ts",{"_index":517,"title":{},"body":{"modules/OwnerModule.html":{}}}],["src/owner/owner.module.ts:39",{"_index":520,"title":{},"body":{"modules/OwnerModule.html":{}}}],["src/owner/permissions/permissions.ts",{"_index":994,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/owner/services/owner.service.ts",{"_index":534,"title":{},"body":{"injectables/OwnerService.html":{},"coverage.html":{}}}],["src/owner/services/owner.service.ts:13",{"_index":542,"title":{},"body":{"injectables/OwnerService.html":{}}}],["src/owner/services/owner.service.ts:23",{"_index":552,"title":{},"body":{"injectables/OwnerService.html":{}}}],["src/owner/services/owner.service.ts:29",{"_index":551,"title":{},"body":{"injectables/OwnerService.html":{}}}],["src/owner/services/owner.service.ts:40",{"_index":549,"title":{},"body":{"injectables/OwnerService.html":{}}}],["src/owner/services/owner.service.ts:44",{"_index":547,"title":{},"body":{"injectables/OwnerService.html":{}}}],["src/owner/services/owner.service.ts:50",{"_index":544,"title":{},"body":{"injectables/OwnerService.html":{}}}],["src/permissions/controllers/permissions.controller.ts",{"_index":619,"title":{},"body":{"controllers/PermissionsController.html":{},"coverage.html":{}}}],["src/permissions/controllers/permissions.controller.ts:16",{"_index":624,"title":{},"body":{"controllers/PermissionsController.html":{}}}],["src/permissions/dtos/register",{"_index":684,"title":{},"body":{"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/permissions/entities",{"_index":300,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/Permissions.html":{},"injectables/PermissionsService.html":{},"entities/RoleEntity.html":{}}}],["src/permissions/entities/index.ts",{"_index":997,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/permissions/entities/permissionentity.ts",{"_index":592,"title":{},"body":{"entities/PermissionEntity.html":{},"coverage.html":{}}}],["src/permissions/entities/permissionentity.ts:12",{"_index":600,"title":{},"body":{"entities/PermissionEntity.html":{}}}],["src/permissions/entities/permissionentity.ts:15",{"_index":602,"title":{},"body":{"entities/PermissionEntity.html":{}}}],["src/permissions/entities/permissionentity.ts:18",{"_index":599,"title":{},"body":{"entities/PermissionEntity.html":{}}}],["src/permissions/entities/permissionentity.ts:21",{"_index":605,"title":{},"body":{"entities/PermissionEntity.html":{}}}],["src/permissions/entities/permissionentity.ts:27",{"_index":597,"title":{},"body":{"entities/PermissionEntity.html":{}}}],["src/permissions/permissions.module",{"_index":528,"title":{},"body":{"modules/OwnerModule.html":{}}}],["src/permissions/permissions.module.ts",{"_index":659,"title":{},"body":{"modules/PermissionsModule.html":{}}}],["src/permissions/permissions.module.ts:43",{"_index":660,"title":{},"body":{"modules/PermissionsModule.html":{}}}],["src/permissions/services/permissions.service",{"_index":557,"title":{},"body":{"injectables/OwnerService.html":{},"guards/PermissionsGaurd.html":{}}}],["src/permissions/services/permissions.service.ts",{"_index":668,"title":{},"body":{"injectables/PermissionsService.html":{},"coverage.html":{}}}],["src/permissions/services/permissions.service.ts:10",{"_index":673,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["src/permissions/services/permissions.service.ts:18",{"_index":677,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["src/permissions/services/permissions.service.ts:23",{"_index":683,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["src/permissions/services/permissions.service.ts:44",{"_index":681,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["src/permissions/services/permissions.service.ts:62",{"_index":679,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["src/roles/controllers/roles.controller.ts",{"_index":764,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/controllers/roles.controller.ts:28",{"_index":771,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/controllers/roles.controller.ts:33",{"_index":769,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/controllers/roles.controller.ts:44",{"_index":767,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/dtos/create",{"_index":286,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/Permissions.html":{},"coverage.html":{}}}],["src/roles/entities",{"_index":830,"title":{},"body":{"classes/SerializedUser.html":{},"entities/UserEntity.html":{}}}],["src/roles/entities/index.ts",{"_index":1001,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/roles/entities/roleentity.ts",{"_index":743,"title":{},"body":{"entities/RoleEntity.html":{},"coverage.html":{}}}],["src/roles/entities/roleentity.ts:21",{"_index":751,"title":{},"body":{"entities/RoleEntity.html":{}}}],["src/roles/entities/roleentity.ts:24",{"_index":752,"title":{},"body":{"entities/RoleEntity.html":{}}}],["src/roles/entities/roleentity.ts:27",{"_index":750,"title":{},"body":{"entities/RoleEntity.html":{}}}],["src/roles/entities/roleentity.ts:31",{"_index":755,"title":{},"body":{"entities/RoleEntity.html":{}}}],["src/roles/entities/roleentity.ts:36",{"_index":745,"title":{},"body":{"entities/RoleEntity.html":{}}}],["src/roles/entities/roleentity.ts:40",{"_index":748,"title":{},"body":{"entities/RoleEntity.html":{}}}],["src/roles/entities/roleentity.ts:43",{"_index":749,"title":{},"body":{"entities/RoleEntity.html":{}}}],["src/roles/entities/roleentity.ts:47",{"_index":753,"title":{},"body":{"entities/RoleEntity.html":{}}}],["src/roles/entities/roleentity.ts:50",{"_index":746,"title":{},"body":{"entities/RoleEntity.html":{}}}],["src/roles/entities/roleentity.ts:53",{"_index":756,"title":{},"body":{"entities/RoleEntity.html":{}}}],["src/roles/permissions/permissions.ts",{"_index":1003,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/roles/roles.module",{"_index":527,"title":{},"body":{"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{}}}],["src/roles/roles.module.ts",{"_index":790,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.module.ts:30",{"_index":791,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/services/roles.service",{"_index":556,"title":{},"body":{"injectables/OwnerService.html":{},"injectables/PermissionsService.html":{}}}],["src/roles/services/roles.service.ts",{"_index":796,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/services/roles.service.ts:16",{"_index":806,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/services/roles.service.ts:27",{"_index":802,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/services/roles.service.ts:38",{"_index":801,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/services/roles.service.ts:46",{"_index":804,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/services/roles.service.ts:9",{"_index":799,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/types/role.ts",{"_index":728,"title":{},"body":{"classes/Role-1.html":{},"coverage.html":{}}}],["src/roles/types/role.ts:2",{"_index":730,"title":{},"body":{"classes/Role-1.html":{}}}],["src/roles/types/role.ts:3",{"_index":731,"title":{},"body":{"classes/Role-1.html":{}}}],["src/roles/types/role.ts:4",{"_index":732,"title":{},"body":{"classes/Role-1.html":{}}}],["src/roles/types/role.ts:5",{"_index":729,"title":{},"body":{"classes/Role-1.html":{}}}],["src/seeds/sampleseed.ts",{"_index":983,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/controllers/users.controller.ts",{"_index":894,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/controllers/users.controller.ts:37",{"_index":906,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/controllers/users.controller.ts:47",{"_index":899,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/controllers/users.controller.ts:58",{"_index":897,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/controllers/users.controller.ts:66",{"_index":902,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/dtos/create",{"_index":205,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/OwnerService.html":{},"classes/Role-3.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/users/entities/index.ts",{"_index":1004,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/entities/userentity",{"_index":761,"title":{},"body":{"entities/RoleEntity.html":{}}}],["src/users/entities/userentity.ts",{"_index":847,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["src/users/entities/userentity.ts:23",{"_index":853,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/entities/userentity.ts:28",{"_index":857,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/entities/userentity.ts:33",{"_index":856,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/entities/userentity.ts:38",{"_index":869,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/entities/userentity.ts:41",{"_index":865,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/entities/userentity.ts:46",{"_index":866,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/entities/userentity.ts:52",{"_index":858,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/entities/userentity.ts:57",{"_index":852,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/entities/userentity.ts:61",{"_index":867,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/entities/userentity.ts:66",{"_index":848,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/entities/userentity.ts:70",{"_index":850,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/entities/userentity.ts:75",{"_index":863,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/entities/userentity.ts:80",{"_index":855,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/entities/userentity.ts:83",{"_index":849,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/entities/userentity.ts:86",{"_index":868,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/permissions/permissions.ts",{"_index":1007,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/users/services/users.service",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OwnerService.html":{},"injectables/PermissionsService.html":{}}}],["src/users/services/users.service.ts",{"_index":934,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/services/users.service.ts:111",{"_index":950,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:12",{"_index":939,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:19",{"_index":951,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:40",{"_index":944,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:56",{"_index":941,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:68",{"_index":943,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:74",{"_index":946,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:94",{"_index":948,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/types/permissions.ts",{"_index":615,"title":{},"body":{"classes/Permissions-1.html":{},"coverage.html":{}}}],["src/users/types/permissions.ts:2",{"_index":616,"title":{},"body":{"classes/Permissions-1.html":{}}}],["src/users/types/permissions.ts:3",{"_index":617,"title":{},"body":{"classes/Permissions-1.html":{}}}],["src/users/types/role.ts",{"_index":734,"title":{},"body":{"classes/Role-2.html":{},"coverage.html":{}}}],["src/users/types/role.ts:2",{"_index":736,"title":{},"body":{"classes/Role-2.html":{}}}],["src/users/types/role.ts:3",{"_index":737,"title":{},"body":{"classes/Role-2.html":{}}}],["src/users/types/role.ts:4",{"_index":738,"title":{},"body":{"classes/Role-2.html":{}}}],["src/users/types/role.ts:5",{"_index":735,"title":{},"body":{"classes/Role-2.html":{}}}],["src/users/types/serializeduser.ts",{"_index":815,"title":{},"body":{"classes/SerializedUser.html":{},"coverage.html":{}}}],["src/users/types/serializeduser.ts:10",{"_index":824,"title":{},"body":{"classes/SerializedUser.html":{}}}],["src/users/types/serializeduser.ts:11",{"_index":820,"title":{},"body":{"classes/SerializedUser.html":{}}}],["src/users/types/serializeduser.ts:12",{"_index":827,"title":{},"body":{"classes/SerializedUser.html":{}}}],["src/users/types/serializeduser.ts:13",{"_index":819,"title":{},"body":{"classes/SerializedUser.html":{}}}],["src/users/types/serializeduser.ts:16",{"_index":818,"title":{},"body":{"classes/SerializedUser.html":{}}}],["src/users/types/serializeduser.ts:5",{"_index":823,"title":{},"body":{"classes/SerializedUser.html":{}}}],["src/users/types/serializeduser.ts:6",{"_index":822,"title":{},"body":{"classes/SerializedUser.html":{}}}],["src/users/types/serializeduser.ts:7",{"_index":821,"title":{},"body":{"classes/SerializedUser.html":{}}}],["src/users/types/serializeduser.ts:8",{"_index":828,"title":{},"body":{"classes/SerializedUser.html":{}}}],["src/users/types/serializeduser.ts:9",{"_index":826,"title":{},"body":{"classes/SerializedUser.html":{}}}],["src/users/types/user.ts",{"_index":836,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/types/user.ts:10",{"_index":842,"title":{},"body":{"classes/User.html":{}}}],["src/users/types/user.ts:11",{"_index":838,"title":{},"body":{"classes/User.html":{}}}],["src/users/types/user.ts:12",{"_index":845,"title":{},"body":{"classes/User.html":{}}}],["src/users/types/user.ts:13",{"_index":837,"title":{},"body":{"classes/User.html":{}}}],["src/users/types/user.ts:4",{"_index":839,"title":{},"body":{"classes/User.html":{}}}],["src/users/types/user.ts:5",{"_index":841,"title":{},"body":{"classes/User.html":{}}}],["src/users/types/user.ts:6",{"_index":840,"title":{},"body":{"classes/User.html":{}}}],["src/users/types/user.ts:7",{"_index":846,"title":{},"body":{"classes/User.html":{}}}],["src/users/types/user.ts:8",{"_index":843,"title":{},"body":{"classes/User.html":{}}}],["src/users/types/user.ts:9",{"_index":844,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.module",{"_index":662,"title":{},"body":{"modules/PermissionsModule.html":{}}}],["src/users/users.module.ts",{"_index":930,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.module.ts:35",{"_index":931,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/utils/errors.interceptor.ts",{"_index":326,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"coverage.html":{}}}],["src/utils/errors.interceptor.ts:13",{"_index":332,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["src/utils/permission.decorator",{"_index":643,"title":{},"body":{"guards/PermissionsGaurd.html":{},"controllers/UsersController.html":{}}}],["src/utils/permission.decorator.ts",{"_index":1011,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/public.meta",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/OwnerController.html":{}}}],["src/utils/public.meta.ts",{"_index":1010,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/reponse.interceptor.ts",{"_index":720,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/utils/reponse.interceptor.ts:18",{"_index":835,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/utils/swagger.config.ts",{"_index":1012,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/user.decorator",{"_index":628,"title":{},"body":{"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["src/utils/user.decorator.ts",{"_index":875,"title":{},"body":{"interfaces/UserInfoType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["standard",{"_index":1149,"title":{},"body":{"index.html":{}}}],["start",{"_index":1139,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1142,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1143,"title":{},"body":{"index.html":{}}}],["started",{"_index":1068,"title":{"index.html":{}},"body":{}}],["starting",{"_index":1084,"title":{},"body":{"index.html":{}}}],["statements",{"_index":981,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":385,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["status(status",{"_index":388,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":390,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":1172,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":424,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/OwnerEntity.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"interfaces/UserInfoType.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":1085,"title":{},"body":{"index.html":{}}}],["super",{"_index":412,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":417,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super_admin",{"_index":576,"title":{},"body":{"injectables/OwnerService.html":{}}}],["support",{"_index":1184,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1185,"title":{},"body":{"modules.html":{}}}],["swaggerconfig",{"_index":1013,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["synchronize",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":722,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":1016,"title":{},"body":{"coverage.html":{}}}],["tables",{"_index":1129,"title":{},"body":{"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1015,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["test:covdevelopment",{"_index":1148,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1147,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1145,"title":{},"body":{"index.html":{}}}],["this.authservice.login(logininfo",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":444,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.createowner(singleownerdto",{"_index":573,"title":{},"body":{"injectables/OwnerService.html":{}}}],["this.createowneruser(createmainuserdto",{"_index":591,"title":{},"body":{"injectables/OwnerService.html":{}}}],["this.findbyid(savedowner.id",{"_index":570,"title":{},"body":{"injectables/OwnerService.html":{}}}],["this.findbyid(saveduser.id",{"_index":974,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findbyid(userid",{"_index":976,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getpermissionkeys(userpermissions",{"_index":695,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["this.globalservice.checkowner(role",{"_index":810,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.globalservice.checkowner(user",{"_index":967,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ownerrepository.create(singleownerdto",{"_index":567,"title":{},"body":{"injectables/OwnerService.html":{}}}],["this.ownerrepository.find",{"_index":561,"title":{},"body":{"injectables/OwnerService.html":{}}}],["this.ownerrepository.findone",{"_index":564,"title":{},"body":{"injectables/OwnerService.html":{}}}],["this.ownerrepository.save(newowner",{"_index":569,"title":{},"body":{"injectables/OwnerService.html":{}}}],["this.ownerservice.create(createownerdto",{"_index":489,"title":{},"body":{"controllers/OwnerController.html":{}}}],["this.ownerservice.search",{"_index":485,"title":{},"body":{"controllers/OwnerController.html":{}}}],["this.password",{"_index":873,"title":{},"body":{"entities/UserEntity.html":{}}}],["this.permissionrepository",{"_index":705,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["this.permissionrepository.create(registerpermissiondto",{"_index":687,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["this.permissionrepository.save(registerpermissiondto",{"_index":688,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["this.permissionsservice.findpermissionbykey",{"_index":575,"title":{},"body":{"injectables/OwnerService.html":{}}}],["this.permissionsservice.getuserpermissions",{"_index":632,"title":{},"body":{"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{}}}],["this.reflector.getallandoverride",{"_index":646,"title":{},"body":{"guards/PermissionsGaurd.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":414,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.rolerepository.create",{"_index":811,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolerepository.find",{"_index":808,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolerepository.findone",{"_index":809,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolerepository.save(newrole",{"_index":812,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.create",{"_index":578,"title":{},"body":{"injectables/OwnerService.html":{}}}],["this.rolesservice.create(createroledto",{"_index":787,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findbyid(id",{"_index":783,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getrolepermissions",{"_index":692,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["this.rolesservice.search(userinfo.owner.id",{"_index":780,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.userrepository",{"_index":956,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create(createmainuserdto",{"_index":975,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create(dtodata",{"_index":971,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":966,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":973,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.finduserbyusername(user.username",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.finduserbyusername(username",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getcurrentuserroles",{"_index":690,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":925,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createmainuser(createmainuserdto",{"_index":565,"title":{},"body":{"injectables/OwnerService.html":{}}}],["this.usersservice.findbyid(id",{"_index":924,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getcurrentuser",{"_index":927,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.search(userinfo.owner.id",{"_index":921,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":445,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["throwerror",{"_index":337,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["timestamp",{"_index":391,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["title",{"_index":324,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Role-3.html":{}}}],["todo",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["token",{"_index":1066,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tokendata",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["toplainonly",{"_index":871,"title":{},"body":{"entities/UserEntity.html":{}}}],["touch",{"_index":1173,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":829,"title":{},"body":{"classes/SerializedUser.html":{},"entities/UserEntity.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":724,"title":{"injectables/TransformInterceptor.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["true",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"guards/PermissionsGaurd.html":{},"entities/RoleEntity.html":{},"injectables/RolesService.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["true})@exclude({toplainonly",{"_index":861,"title":{},"body":{"entities/UserEntity.html":{}}}],["true})@jointable",{"_index":862,"title":{},"body":{"entities/UserEntity.html":{}}}],["twitter",{"_index":1178,"title":{},"body":{"index.html":{}}}],["two",{"_index":1121,"title":{},"body":{"index.html":{}}}],["type",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/GlobalService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/OwnerController.html":{},"entities/OwnerEntity.html":{},"modules/OwnerModule.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"classes/Permissions.html":{},"classes/Permissions-1.html":{},"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RegisterPermissionDto.html":{},"interfaces/Response.html":{},"classes/Role.html":{},"classes/Role-1.html":{},"classes/Role-2.html":{},"classes/Role-3.html":{},"entities/RoleEntity.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializedUser.html":{},"classes/SingleOwnerDto.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type1.ts",{"_index":1164,"title":{},"body":{"index.html":{}}}],["type2.ts",{"_index":1165,"title":{},"body":{"index.html":{}}}],["typealiases",{"_index":1194,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"entities/OwnerEntity.html":{},"injectables/OwnerService.html":{},"entities/PermissionEntity.html":{},"injectables/PermissionsService.html":{},"entities/RoleEntity.html":{},"injectables/RolesService.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([ownerentity",{"_index":529,"title":{},"body":{"modules/OwnerModule.html":{}}}],["typeormmodule.forfeature([permissionentity",{"_index":665,"title":{},"body":{"modules/PermissionsModule.html":{}}}],["typeormmodule.forfeature([roleentity",{"_index":793,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forroot(generateappconfig",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["types",{"_index":1163,"title":{},"body":{"index.html":{}}}],["types/serializeduser",{"_index":952,"title":{},"body":{"injectables/UsersService.html":{}}}],["unauthorized",{"_index":889,"title":{},"body":{"interfaces/UserInfoType.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":443,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":860,"title":{},"body":{"entities/UserEntity.html":{}}}],["undefined})@isarray()@arrayminsize(1",{"_index":318,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["unique",{"_index":601,"title":{},"body":{"entities/PermissionEntity.html":{},"entities/UserEntity.html":{}}}],["unit",{"_index":1144,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/OwnerController.html":{},"injectables/OwnerService.html":{},"controllers/PermissionsController.html":{},"injectables/PermissionsService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update_owner",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update_role",{"_index":1052,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["update_users",{"_index":1060,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["updated_at",{"_index":495,"title":{},"body":{"entities/OwnerEntity.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["updatedatecolumn",{"_index":506,"title":{},"body":{"entities/OwnerEntity.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{}}}],["updaterole",{"_index":1051,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["updateuser",{"_index":1059,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["use",{"_index":448,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"index.html":{}}}],["use(req",{"_index":449,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["useclass",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{},"modules/GlobalModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["useexisting",{"_index":531,"title":{},"body":{"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{}}}],["usefilters",{"_index":908,"title":{},"body":{"controllers/UsersController.html":{}}}],["usefilters(new",{"_index":923,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('local",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@public()@post('login",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":909,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":919,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor)@get('/search/:id')@usefilters(new",{"_index":898,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor)@requirepermissions(permissionenums.loaduser)@get('/search",{"_index":905,"title":{},"body":{"controllers/UsersController.html":{}}}],["usepipes",{"_index":474,"title":{},"body":{"controllers/OwnerController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["usepipes(validationpipe",{"_index":487,"title":{},"body":{"controllers/OwnerController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":170,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"entities/OwnerEntity.html":{},"classes/User.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":555,"title":{},"body":{"injectables/OwnerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":207,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateUserDto.html":{},"classes/Role-3.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["user.dto.ts:13",{"_index":740,"title":{},"body":{"classes/Role-3.html":{}}}],["user.dto.ts:14",{"_index":741,"title":{},"body":{"classes/Role-3.html":{}}}],["user.dto.ts:21",{"_index":313,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":233,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["user.dto.ts:26",{"_index":312,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":232,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["user.dto.ts:30",{"_index":246,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["user.dto.ts:31",{"_index":321,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:34",{"_index":240,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["user.dto.ts:36",{"_index":314,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":242,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["user.dto.ts:41",{"_index":315,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:42",{"_index":236,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["user.dto.ts:46",{"_index":224,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateUserDto.html":{}}}],["user.dto.ts:50",{"_index":245,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["user.dto.ts:51",{"_index":309,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:54",{"_index":220,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["user.dto.ts:57",{"_index":222,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["user.dto.ts:60",{"_index":237,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["user.dto.ts:63",{"_index":229,"title":{},"body":{"classes/CreateMainUserDto.html":{}}}],["user.dto.ts:71",{"_index":319,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:76",{"_index":308,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:80",{"_index":311,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.owners",{"_index":509,"title":{},"body":{"entities/OwnerEntity.html":{}}}],["user.roles",{"_index":977,"title":{},"body":{"injectables/UsersService.html":{}}}],["user_general",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_service",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["userandownerinfo",{"_index":627,"title":{},"body":{"controllers/PermissionsController.html":{},"guards/PermissionsGaurd.html":{},"controllers/RolesController.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userandownerinfo.owner.id",{"_index":651,"title":{},"body":{"guards/PermissionsGaurd.html":{}}}],["userandownerinfo.user.id",{"_index":650,"title":{},"body":{"guards/PermissionsGaurd.html":{}}}],["userdb",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdb.defaultowner",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdb.id",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdb.password",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdb.username",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentities",{"_index":1005,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userentity",{"_index":141,"title":{"entities/UserEntity.html":{}},"body":{"modules/AuthModule.html":{},"entities/OwnerEntity.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":434,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PermissionsService.html":{},"injectables/UsersService.html":{}}}],["userinfo",{"_index":625,"title":{},"body":{"controllers/PermissionsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["userinfo.owner.id",{"_index":634,"title":{},"body":{"controllers/PermissionsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["userinfo.user.id",{"_index":633,"title":{},"body":{"controllers/PermissionsController.html":{},"controllers/UsersController.html":{}}}],["userinfotype",{"_index":622,"title":{"interfaces/UserInfoType.html":{}},"body":{"controllers/PermissionsController.html":{},"controllers/RolesController.html":{},"interfaces/UserInfoType.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["username",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/OwnerService.html":{},"classes/Role.html":{},"classes/Role-3.html":{},"classes/SerializedUser.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["userpermissions",{"_index":649,"title":{},"body":{"guards/PermissionsGaurd.html":{},"injectables/PermissionsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userpermissions.concat(rolepermissions",{"_index":694,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["userrepository",{"_index":940,"title":{},"body":{"injectables/UsersService.html":{}}}],["userroles",{"_index":689,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["users",{"_index":496,"title":{},"body":{"entities/OwnerEntity.html":{},"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["users/entities",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"entities/OwnerEntity.html":{}}}],["users/services/users.service",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/users.module",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/OwnerModule.html":{}}}],["userscontroller",{"_index":893,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionsService.html":{}}}],["usersmodule",{"_index":12,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":139,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/OwnerService.html":{},"injectables/PermissionsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["utils",{"_index":1153,"title":{},"body":{"index.html":{}}}],["utils/constants",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{}}}],["utils/jwt.strategy",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{}}}],["utils/localstrategy",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["validate",{"_index":419,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":421,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":440,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationpipe",{"_index":475,"title":{},"body":{"controllers/OwnerController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["validator",{"_index":252,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateOwnerDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/Permissions.html":{},"classes/RegisterPermissionDto.html":{},"classes/Role.html":{},"classes/Role-3.html":{},"classes/SingleOwnerDto.html":{},"dependencies.html":{}}}],["value",{"_index":226,"title":{},"body":{"classes/CreateMainUserDto.html":{},"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":989,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1198,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1110,"title":{},"body":{"index.html":{},"properties.html":{}}}],["vital",{"_index":1130,"title":{},"body":{"index.html":{}}}],["void",{"_index":376,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"entities/UserEntity.html":{},"modules/UsersModule.html":{}}}],["watch",{"_index":1140,"title":{},"body":{"index.html":{}}}],["where('owners.id",{"_index":959,"title":{},"body":{"injectables/UsersService.html":{}}}],["where('permissions.key",{"_index":709,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["work",{"_index":1131,"title":{},"body":{"index.html":{}}}],["x1b[34m%s\\x1b[0m",{"_index":460,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["xxxx.middleware.ts",{"_index":1152,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":1078,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GlobalModule.html":{},"modules/OwnerModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nGlobalModule\n\nGlobalModule\n\nAppModule -->\n\nGlobalModule->AppModule\n\n\n\n\n\nOwnerModule\n\nOwnerModule\n\nAppModule -->\n\nOwnerModule->AppModule\n\n\n\n\n\nPermissionsModule\n\nPermissionsModule\n\nAppModule -->\n\nPermissionsModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            GlobalModule\n                        \n                        \n                            OwnerModule\n                        \n                        \n                            PermissionsModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { RolesModule } from './roles/roles.module';\nimport { AuthModule } from './auth/auth.module';\nimport { OwnerModule } from './owner/owner.module';\nimport { GlobalModule } from './global/global.module';\nimport { PermissionsModule } from './permissions/permissions.module';\nimport { ConfigModule } from '@nestjs/config';\n\n//This line is required to load .env file\nConfigModule.forRoot();\n\n//This is the function where typeORM configs can be set. TODO: add other databases options\nfunction generateAppConfig(): TypeOrmModuleOptions {\n  return {\n    type: 'mysql',\n    host:\n      process.env.MODE.trimEnd() === 'TEST'\n        ? process.env.MYSQL_HOST_TEST\n        : process.env.MYSQL_HOST,\n    port:\n      process.env.MODE.trimEnd() === 'TEST'\n        ? parseInt(process.env.MYSQL_PORT_TEST)\n        : parseInt(process.env.MYSQL_PORT),\n    username:\n      process.env.MODE.trimEnd() === 'TEST'\n        ? process.env.MYSQL_USERNAME_TEST\n        : process.env.MYSQL_USERNAME,\n    password:\n      process.env.MODE.trimEnd() === 'TEST'\n        ? process.env.MYSQL_PASSWORD_TEST\n        : process.env.MYSQL_PASSWORD,\n    database:\n      process.env.MODE.trimEnd() === 'TEST'\n        ? process.env.MYSQL_DATABASE_TEST\n        : process.env.MYSQL_DATABASE,\n    synchronize: true,\n    logging: true,\n    logger: process.env.MODE !== 'PRODUCTION' ? 'debug' : 'simple-console',\n    autoLoadEntities: true,\n  };\n}\n\n@Module({\n  imports: [\n    PermissionsModule,\n    OwnerModule,\n    UsersModule,\n    RolesModule,\n    AuthModule,\n    GlobalModule,\n    TypeOrmModule.forRoot(generateAppConfig()),\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginInfo: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Public()@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/controllers/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginInfo\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Inject, UseGuards, Body } from '@nestjs/common';\nimport { Public } from 'src/utils/Public.Meta';\nimport { AuthService } from '../services/auth.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiTags } from '@nestjs/swagger';\nimport { LoginDto } from '../dtos/login.dto';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    @Inject('AUTH_SERVICE') private readonly authService: AuthService,\n  ) {}\n\n  @UseGuards(AuthGuard('local'))\n  @Public()\n  @Post('login')\n  async login(@Body() loginInfo: LoginDto) {\n    return this.authService.login(loginInfo);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\n{\n    provide: , useClass: AuthService,\n} \n\n{\n    provide: , useClass: AuthService,\n} \n\n\n\nAuthModule\n\nAuthModule\n\n{\n    provide: , useClass: AuthService,\n}  -->\n\nAuthModule->{\n    provide: , useClass: AuthService,\n} \n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            {\n    provide: , useClass: AuthService,\n}\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './controllers/auth.controller';\nimport { AuthService } from './services/auth.service';\nimport { UsersService } from '../users/services/users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserEntity } from '../users/Entities';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './utils/LocalStrategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './utils/constants';\nimport { JwtStrategy } from './utils/jwt.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity]),\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '360000s' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [\n    {\n      provide: 'AUTH_SERVICE',\n      useClass: AuthService,\n    },\n    {\n      provide: 'USER_SERVICE',\n      useClass: UsersService,\n    },\n    LocalStrategy,\n    JwtStrategy,\n  ],\n  exports: [\n    {\n      provide: 'AUTH_SERVICE',\n      useClass: AuthService,\n    },\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService, globalService: GlobalService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/services/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        globalService\n                                                  \n                                                        \n                                                                        GlobalService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/services/auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/services/auth.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/services/users.service';\nimport { GlobalService } from 'src/global/services/global.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject('USER_SERVICE') private readonly userService: UsersService,\n    private jwtService: JwtService,\n    @Inject('GLOBAL_SERVICE') private readonly globalService: GlobalService,\n  ) {}\n  async validateUser(username: string, password: string) {\n    const userDB = await this.userService.findUserByUserName(username);\n    if (userDB) {\n      const isMatch = await bcrypt.compare(password, userDB.password);\n      if (isMatch) {\n        return userDB;\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n  async login(user: any) {\n    const userDB = await this.userService.findUserByUserName(user.username);\n    delete userDB.password;\n    //Hint : The default owner is set now , in feature there will be a feature to select owner\n    const tokenData = {\n      id: userDB.id,\n      username: userDB.username,\n    };\n    const payload = { tokenData, owner: userDB.defaultOwner };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMainUserDto.html":{"url":"classes/CreateMainUserDto.html","title":"class - CreateMainUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMainUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-main-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                defaultOwner\n                            \n                            \n                                email\n                            \n                            \n                                isMainUser\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                nationalCode\n                            \n                            \n                                owners\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Length(0, 100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-main-user.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        defaultOwner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         owner\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-main-user.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-main-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMainUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-main-user.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Length(5, 20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-main-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Length(5, 20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-main-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nationalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Length(10, 10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-main-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        owners\n                        \n                    \n                \n            \n                \n                    \n                        Type :         owner[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-main-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@Length(8, 50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-main-user.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsPhoneNumber('IR')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-main-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ArrayMinSize(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-main-user.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-main-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsEmail,\n  IsPhoneNumber,\n  Length,\n  IsOptional,\n  IsArray,\n  ArrayMinSize,\n} from 'class-validator';\n\ntype Role = {\n  id: number;\n  name?: string;\n};\n\ntype owner = {\n  id: number;\n};\n\nexport class CreateMainUserDto {\n  @IsOptional()\n  @Length(5, 20)\n  name?: string;\n\n  @IsOptional()\n  @Length(5, 20)\n  lastName?: string;\n\n  @IsNotEmpty()\n  username: string;\n\n  @IsNotEmpty()\n  @Length(8, 50)\n  password: string;\n\n  @IsNotEmpty()\n  @IsPhoneNumber('IR')\n  phoneNumber: string;\n\n  @IsOptional()\n  @Length(10, 10)\n  nationalCode?: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsArray()\n  @ArrayMinSize(1)\n  roles: Role[];\n\n  @IsOptional()\n  @Length(0, 100)\n  address?: string;\n\n  @IsNotEmpty()\n  defaultOwner: owner;\n\n  @IsNotEmpty()\n  owners: owner[];\n\n  @IsOptional()\n  isMainUser: boolean = false;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOwnerDto.html":{"url":"classes/CreateOwnerDto.html","title":"class - CreateOwnerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOwnerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/owner/dtos/create-owner.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                nationalCode\n                            \n                            \n                                ownerDisplayName\n                            \n                            \n                                ownerName\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@Length(0, 100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/dtos/create-owner.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/dtos/create-owner.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@Length(5, 20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/dtos/create-owner.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@Length(5, 20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/dtos/create-owner.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nationalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@Length(10, 10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/dtos/create-owner.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ownerDisplayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(0, 100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/dtos/create-owner.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ownerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(0, 100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/dtos/create-owner.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(8, 50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/dtos/create-owner.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsPhoneNumber('IR')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/dtos/create-owner.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/dtos/create-owner.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsEmail,\n  IsPhoneNumber,\n  Length,\n  IsOptional,\n  IsArray,\n  ArrayMinSize,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nclass Role {\n  id: number;\n  name?: string;\n}\nexport class CreateOwnerDto {\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(5, 20)\n  name?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(5, 20)\n  lastName?: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(8, 50)\n  password: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsPhoneNumber('IR')\n  phoneNumber: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(10, 10)\n  nationalCode?: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(0, 100)\n  address?: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(0, 100)\n  ownerName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(0, 100)\n  ownerDisplayName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoleDto.html":{"url":"classes/CreateRoleDto.html","title":"class - CreateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dtos/create-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                description\n                            \n                            \n                                displayName\n                            \n                            \n                                name\n                            \n                            \n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dtos/create-role.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dtos/create-role.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dtos/create-role.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dtos/create-role.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermissionEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => })@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dtos/create-role.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, IsOptional } from 'class-validator';\nimport { PermissionEntity } from 'src/permissions/Entities';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateRoleDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  displayName: string;\n\n  @ApiProperty({\n    type: () => [Permissions],\n  })\n  @IsArray()\n  permissions: PermissionEntity[];\n\n  @ApiProperty()\n  @IsOptional()\n  color: string;\n\n  @ApiProperty()\n  @IsOptional()\n  description: string;\n}\n\nclass Permissions {\n  @ApiProperty()\n  id: 'number';\n  @ApiProperty()\n  key: string;\n  @ApiProperty()\n  displayName?: string;\n  @ApiProperty({\n    nullable: true,\n  })\n  parent: Permissions;\n  @ApiProperty({\n    isArray: true,\n    minItems: 0,\n  })\n  children: Permissions[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                email\n                            \n                            \n                                isMainUser\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                nationalCode\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@Length(0, 100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMainUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@Length(5, 20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@Length(5, 20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nationalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@Length(10, 10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(8, 50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsPhoneNumber('IR')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', items: undefined})@IsArray()@ArrayMinSize(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(4, 20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsEmail,\n  IsPhoneNumber,\n  Length,\n  IsOptional,\n  IsArray,\n  ArrayMinSize,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nclass Role {\n  id: number;\n  name?: string;\n}\n\nexport class CreateUserDto {\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(5, 20)\n  name?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(5, 20)\n  lastName?: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(4, 20)\n  username: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(8, 50)\n  password: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsPhoneNumber('IR')\n  phoneNumber: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(10, 10)\n  nationalCode?: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    type: 'array',\n    items: {\n      type: 'object',\n      title: 'Role',\n      properties: {\n        id: {\n          type: 'number',\n        },\n        name: {\n          type: 'string',\n        },\n      },\n      required: ['id'],\n    },\n  })\n  @IsArray()\n  @ArrayMinSize(1)\n  roles: Role[];\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(0, 100)\n  address?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  isMainUser: boolean = false;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorsInterceptor.html":{"url":"injectables/ErrorsInterceptor.html","title":"injectable - ErrorsInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorsInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/errors.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(_context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/errors.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  BadGatewayException,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorsInterceptor implements NestInterceptor {\n  intercept(_context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(catchError((_err) => throwError(() => new BadGatewayException())));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GlobalController.html":{"url":"controllers/GlobalController.html","title":"controller - GlobalController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GlobalController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/controllers/global.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                global\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('global')\nexport class GlobalController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GlobalModule.html":{"url":"modules/GlobalModule.html","title":"module - GlobalModule","body":"\n                   \n\n\n\n\n    Modules\n    GlobalModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GlobalModule\n\n\n\ncluster_GlobalModule_exports\n\n\n\n\n{\n    provide: , useClass: GlobalService,\n} \n\n{\n    provide: , useClass: GlobalService,\n} \n\n\n\nGlobalModule\n\nGlobalModule\n\n{\n    provide: , useClass: GlobalService,\n}  -->\n\nGlobalModule->{\n    provide: , useClass: GlobalService,\n} \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/global/global.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            {\n    provide: , useClass: GlobalService,\n}\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { GlobalService } from './services/global.service';\n\n@Global()\n@Module({\n  providers: [\n    {\n      provide: 'GLOBAL_SERVICE',\n      useClass: GlobalService,\n    },\n  ],\n  exports: [\n    {\n      provide: 'GLOBAL_SERVICE',\n      useClass: GlobalService,\n    },\n  ],\n})\nexport class GlobalModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GlobalService.html":{"url":"injectables/GlobalService.html","title":"injectable - GlobalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GlobalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/services/global.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkOwner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkOwner\n                        \n                    \n                \n            \n            \n                \ncheckOwner(record: any, ownerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/global/services/global.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    record\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class GlobalService {\n  checkOwner(record: any, ownerId: number) {\n    let isOwner = false;\n    if (record.owners?.length) {\n      record.owners.map((singleOwner) => {\n        isOwner = parseInt(singleOwner.id) == ownerId;\n      });\n    } else if (record.owner) {\n      isOwner = parseInt(record.owner.id) == ownerId;\n    }\n    return isOwner;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ExceptionHandler/http-exceptions.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/ExceptionHandler/http-exceptions.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n    catch(exception: HttpException, host: ArgumentsHost) {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus();\n\n        console.error(exception);\n\n\n        response\n            .status(status)\n            .json({\n                statusCode: status,\n                timestamp: new Date().toISOString(),\n                message: exception.message,\n                path: request.url,\n            });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Reflector } from '@nestjs/core';\nimport { IS_PUBLIC_KEY } from 'src/utils/Public.Meta';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/utils/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/utils/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/utils/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return {\n      userId: payload.sub,\n      username: payload.username,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/utils/LocalStrategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/utils/LocalStrategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/utils/LocalStrategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    @Inject('AUTH_SERVICE') private readonly authService: AuthService,\n  ) {\n    super();\n  }\n\n  async validate(username: string, password: string) {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Middlewares/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, _res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/Middlewares/logger.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: Request, _res: Response, next: NextFunction) {\n    if (req.method === 'GET') {\n      console.info(\n        'Request to path: \\n' +\n          req.route.path +\n          '\\n with method : \\n ' +\n          req.method,\n      );\n    } else {\n      console.info(\n        '\\x1b[34m%s\\x1b[0m',\n        'Request to path: \\n' +\n          req.route.path +\n          '\\n with method : \\n ' +\n          req.method +\n          '\\n and body: \\n ' +\n          JSON.stringify(req.body),\n      );\n    }\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(8, 50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/login.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(4, 20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/login.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, Length } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(4, 20)\n  username: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(8, 50)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OwnerController.html":{"url":"controllers/OwnerController.html","title":"controller - OwnerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OwnerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/owner/controllers/owner.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                owner\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createOwnerDto: CreateOwnerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('/create')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/owner/controllers/owner.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createOwnerDto\n                                    \n                                                CreateOwnerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('/search')\n                \n            \n\n            \n                \n                    Defined in src/owner/controllers/owner.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  Post,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { OwnerService } from '../services/owner.service';\nimport { CreateOwnerDto } from '../dtos/create-owner.dto';\nimport { Public } from 'src/utils/Public.Meta';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Owners')\n@Controller('owner')\nexport class OwnerController {\n  constructor(\n    @Inject('OWNER_SERVICE') private readonly ownerService: OwnerService,\n  ) {}\n\n  @ApiBearerAuth()\n  @Get('/search')\n  async search() {\n    await this.ownerService.search();\n  }\n\n  @Public()\n  @Post('/create')\n  @UsePipes(ValidationPipe)\n  async create(@Body() createOwnerDto: CreateOwnerDto) {\n    return this.ownerService.create(createOwnerDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/OwnerEntity.html":{"url":"entities/OwnerEntity.html","title":"entity - OwnerEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  OwnerEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/owner/Entities/OwnerEntity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                displayName\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                updated_at\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/Entities/OwnerEntity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/Entities/OwnerEntity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/Entities/OwnerEntity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/Entities/OwnerEntity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/Entities/OwnerEntity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, user => user.owners)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/Entities/OwnerEntity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { UserEntity } from '../../users/Entities';\n\n@Entity()\nexport class OwnerEntity {\n  @PrimaryGeneratedColumn({\n    type: 'bigint',\n  })\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  displayName: string;\n\n  @OneToMany(() => UserEntity, (user) => user.owners)\n  users: UserEntity[];\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  @UpdateDateColumn()\n  updated_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OwnerModule.html":{"url":"modules/OwnerModule.html","title":"module - OwnerModule","body":"\n                   \n\n\n\n\n    Modules\n    OwnerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OwnerModule\n\n\n\ncluster_OwnerModule_providers\n\n\n\ncluster_OwnerModule_exports\n\n\n\ncluster_OwnerModule_imports\n\n\n\n\nPermissionsModule\n\nPermissionsModule\n\n\n\nOwnerModule\n\nOwnerModule\n\nOwnerModule -->\n\nPermissionsModule->OwnerModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nOwnerModule -->\n\nRolesModule->OwnerModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nOwnerModule -->\n\nUsersModule->OwnerModule\n\n\n\n\n\n{\n    provide: , useClass: OwnerService,\n} \n\n{\n    provide: , useClass: OwnerService,\n} \n\n{\n    provide: , useClass: OwnerService,\n}  -->\n\nOwnerModule->{\n    provide: , useClass: OwnerService,\n} \n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nOwnerModule -->\n\nJwtAuthGuard->OwnerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/owner/owner.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtAuthGuard\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OwnerController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PermissionsModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            {\n    provide: , useClass: OwnerService,\n}\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: any)\n                \n            \n\n\n            \n                \n                    Defined in src/owner/owner.module.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, NestModule } from '@nestjs/common';\nimport { OwnerService } from './services/owner.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { OwnerEntity } from './Entities';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { LoggerMiddleware } from '../Middlewares/logger.middleware';\nimport { OwnerController } from './controllers/owner.controller';\nimport { UsersModule } from '../users/users.module';\nimport { RolesModule } from 'src/roles/roles.module';\nimport { PermissionsModule } from 'src/permissions/permissions.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    RolesModule,\n    PermissionsModule,\n    TypeOrmModule.forFeature([OwnerEntity]),\n  ],\n  controllers: [OwnerController],\n  providers: [\n    {\n      provide: 'APP_GUARD',\n      useExisting: JwtAuthGuard,\n    },\n    {\n      provide: 'OWNER_SERVICE',\n      useClass: OwnerService,\n    },\n    JwtAuthGuard,\n  ],\n  exports: [\n    {\n      provide: 'OWNER_SERVICE',\n      useClass: OwnerService,\n    },\n  ],\n})\nexport class OwnerModule implements NestModule {\n  configure(consumer: any) {\n    consumer.apply(LoggerMiddleware).forRoutes(OwnerController);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OwnerService.html":{"url":"injectables/OwnerService.html","title":"injectable - OwnerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OwnerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/owner/services/owner.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createOwner\n                            \n                            \n                                    Async\n                                createOwnerUser\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ownerRepository: Repository, usersService: UsersService, rolesService: RolesService, permissionsService: PermissionsService)\n                    \n                \n                        \n                            \n                                Defined in src/owner/services/owner.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ownerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        permissionsService\n                                                  \n                                                        \n                                                                        PermissionsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createOwnerDto: CreateOwnerDto)\n                \n            \n\n\n            \n                \n                    Defined in src/owner/services/owner.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createOwnerDto\n                                    \n                                                CreateOwnerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createOwner\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOwner(singleOwnerDto: SingleOwnerDto)\n                \n            \n\n\n            \n                \n                    Defined in src/owner/services/owner.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    singleOwnerDto\n                                    \n                                                SingleOwnerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createOwnerUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOwnerUser(createMainUserDto: CreateMainUserDto, ownerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/owner/services/owner.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createMainUserDto\n                                    \n                                                CreateMainUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/owner/services/owner.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search()\n                \n            \n\n\n            \n                \n                    Defined in src/owner/services/owner.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { OwnerEntity } from '../Entities';\nimport { CreateOwnerDto } from '../dtos/create-owner.dto';\nimport { SingleOwnerDto } from '../dtos/create-single-owner.dto';\nimport { UsersService } from 'src/users/services/users.service';\nimport { CreateMainUserDto } from 'src/users/dtos/create-main-user.dto';\nimport { RolesService } from 'src/roles/services/roles.service';\nimport { PermissionsService } from 'src/permissions/services/permissions.service';\n\n@Injectable()\nexport class OwnerService {\n  constructor(\n    @InjectRepository(OwnerEntity)\n    private readonly ownerRepository: Repository,\n    @Inject('USER_SERVICE') private readonly usersService: UsersService,\n    @Inject('ROLES_SERVICE') private readonly rolesService: RolesService,\n    @Inject('PERMISSION_SERVICE')\n    private readonly permissionsService: PermissionsService,\n  ) {}\n\n  async search() {\n    return this.ownerRepository.find({\n      relations: ['mainUser'],\n    });\n  }\n\n  async findById(id: number) {\n    const owner = await this.ownerRepository.findOne({\n      where: {\n        id: id,\n      },\n    });\n\n    if (owner) return owner;\n    else return null;\n  }\n\n  async createOwnerUser(createMainUserDto: CreateMainUserDto, ownerId: number) {\n    return this.usersService.createMainUser(createMainUserDto, ownerId);\n  }\n\n  async createOwner(singleOwnerDto: SingleOwnerDto) {\n    const newOwner = this.ownerRepository.create(singleOwnerDto);\n    const savedOwner = await this.ownerRepository.save(newOwner);\n    return this.findById(savedOwner.id);\n  }\n\n  async create(createOwnerDto: CreateOwnerDto) {\n    const singleOwnerDto: SingleOwnerDto = {\n      name: createOwnerDto.ownerName,\n      displayName: createOwnerDto.ownerDisplayName,\n    };\n    const newOwner = await this.createOwner(singleOwnerDto);\n    const mainPermission = await this.permissionsService.findPermissionByKey(\n      'SUPER_ADMIN',\n    );\n    const newRole = await this.rolesService.create(\n      {\n        name: 'ADMIN',\n        description: 'Main role ADMIN',\n        displayName: 'Admin',\n        color: '#00000',\n        permissions: [mainPermission],\n      },\n      newOwner.id,\n    );\n    const createMainUserDto: CreateMainUserDto = {\n      name: createOwnerDto.name,\n      lastName: createOwnerDto.lastName,\n      username: createOwnerDto.username,\n      password: createOwnerDto.password,\n      phoneNumber: createOwnerDto.phoneNumber,\n      nationalCode: createOwnerDto.nationalCode,\n      email: createOwnerDto.email,\n      address: createOwnerDto.address,\n      isMainUser: true,\n      defaultOwner: { id: newOwner.id },\n      owners: [{ id: newOwner.id }],\n      roles: [{ id: newRole.id }],\n    };\n    return this.createOwnerUser(createMainUserDto, newOwner.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PermissionEntity.html":{"url":"entities/PermissionEntity.html","title":"entity - PermissionEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PermissionEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permissions/Entities/PermissionEntity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                    Optional\n                                displayName\n                            \n                            \n                                id\n                            \n                            \n                                key\n                            \n                            \n                                parent\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermissionEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, permission => permission.parent, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/Entities/PermissionEntity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/Entities/PermissionEntity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/Entities/PermissionEntity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/Entities/PermissionEntity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermissionEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, permission => permission.children)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/Entities/PermissionEntity.ts:21\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\n\n@Entity()\nexport class PermissionEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ nullable: true, unique: true })\n  key: string;\n\n  @Column({ nullable: true })\n  displayName?: string;\n\n  @ManyToOne(() => PermissionEntity, (permission) => permission.children)\n  parent: PermissionEntity;\n\n  @OneToMany(() => PermissionEntity, (permission) => permission.parent, {\n    cascade: true,\n    eager: true,\n  })\n  children: PermissionEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Permissions.html":{"url":"classes/Permissions.html","title":"class - Permissions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Permissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dtos/create-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                    Optional\n                                displayName\n                            \n                            \n                                id\n                            \n                            \n                                key\n                            \n                            \n                                parent\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Permissions[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({isArray: true, minItems: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dtos/create-role.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dtos/create-role.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dtos/create-role.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dtos/create-role.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Permissions\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dtos/create-role.dto.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, IsOptional } from 'class-validator';\nimport { PermissionEntity } from 'src/permissions/Entities';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateRoleDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  displayName: string;\n\n  @ApiProperty({\n    type: () => [Permissions],\n  })\n  @IsArray()\n  permissions: PermissionEntity[];\n\n  @ApiProperty()\n  @IsOptional()\n  color: string;\n\n  @ApiProperty()\n  @IsOptional()\n  description: string;\n}\n\nclass Permissions {\n  @ApiProperty()\n  id: 'number';\n  @ApiProperty()\n  key: string;\n  @ApiProperty()\n  displayName?: string;\n  @ApiProperty({\n    nullable: true,\n  })\n  parent: Permissions;\n  @ApiProperty({\n    isArray: true,\n    minItems: 0,\n  })\n  children: Permissions[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Permissions-1.html":{"url":"classes/Permissions-1.html","title":"class - Permissions-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Permissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/types/Permissions.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/Permissions.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/Permissions.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Permissions {\n    id: number;\n    name: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PermissionsController.html":{"url":"controllers/PermissionsController.html","title":"controller - PermissionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PermissionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permissions/controllers/permissions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                permissions\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCurrentUserPermissions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCurrentUserPermissions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCurrentUserPermissions(userInfo: UserInfoType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/CurrentUserPermissions')\n                \n            \n\n            \n                \n                    Defined in src/permissions/controllers/permissions.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userInfo\n                                    \n                                                UserInfoType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject } from '@nestjs/common';\nimport { PermissionsService } from '../services/permissions.service';\nimport { userAndOwnerInfo, UserInfoType } from 'src/utils/user.decorator';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Permissions')\n@ApiBearerAuth()\n@Controller('permissions')\nexport class PermissionsController {\n  constructor(\n    @Inject('PERMISSION_SERVICE')\n    private readonly permissionsService: PermissionsService,\n  ) {}\n\n  @Get('/CurrentUserPermissions')\n  async getCurrentUserPermissions(@userAndOwnerInfo() userInfo: UserInfoType) {\n    return this.permissionsService.getUserPermissions(\n      userInfo.user.id,\n      userInfo.owner.id,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PermissionsGaurd.html":{"url":"guards/PermissionsGaurd.html","title":"guard - PermissionsGaurd","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PermissionsGaurd\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/permissions.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, permissionsService: PermissionsService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/permissions.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        permissionsService\n                                                  \n                                                        \n                                                                        PermissionsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/permissions.guard.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  Inject,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { PermissionsService } from 'src/permissions/services/permissions.service';\nimport { PERMISSIONS_KEY } from 'src/utils/permission.decorator';\nimport { getUserInfoFunc } from 'src/utils/user.decorator';\n\n@Injectable()\nexport class PermissionsGaurd implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    @Inject('PERMISSION_SERVICE')\n    private readonly permissionsService: PermissionsService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const requiredPermissions = this.reflector.getAllAndOverride(\n      PERMISSIONS_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n    if (!requiredPermissions) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const userAndOwnerInfo = getUserInfoFunc(request.headers.authorization);\n    const userPermissions = async () => {\n      return this.permissionsService.getUserPermissions(\n        userAndOwnerInfo.user.id,\n        userAndOwnerInfo.owner.id,\n      );\n    };\n    const loggedInuserPermissions = await userPermissions();\n    return requiredPermissions.some((permission) =>\n      loggedInuserPermissions.includes(permission),\n    );\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PermissionsModule.html":{"url":"modules/PermissionsModule.html","title":"module - PermissionsModule","body":"\n                   \n\n\n\n\n    Modules\n    PermissionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PermissionsModule\n\n\n\ncluster_PermissionsModule_exports\n\n\n\ncluster_PermissionsModule_providers\n\n\n\ncluster_PermissionsModule_imports\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nPermissionsModule\n\nPermissionsModule\n\nPermissionsModule -->\n\nRolesModule->PermissionsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPermissionsModule -->\n\nUsersModule->PermissionsModule\n\n\n\n\n\n{\n    provide: , useClass: PermissionsService,\n} \n\n{\n    provide: , useClass: PermissionsService,\n} \n\n{\n    provide: , useClass: PermissionsService,\n}  -->\n\nPermissionsModule->{\n    provide: , useClass: PermissionsService,\n} \n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nPermissionsModule -->\n\nJwtAuthGuard->PermissionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/permissions/permissions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtAuthGuard\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PermissionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            {\n    provide: , useClass: PermissionsService,\n}\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: any)\n                \n            \n\n\n            \n                \n                    Defined in src/permissions/permissions.module.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, Global, NestModule } from '@nestjs/common';\nimport { PermissionsController } from './controllers/permissions.controller';\nimport { PermissionsService } from './services/permissions.service';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PermissionEntity } from './Entities';\nimport { UsersModule } from 'src/users/users.module';\nimport { RolesModule } from 'src/roles/roles.module';\nimport { PermissionsGaurd } from 'src/auth/permissions.guard';\nimport { LoggerMiddleware } from 'src/Middlewares/logger.middleware';\n\n@Global()\n@Module({\n  imports: [\n    UsersModule,\n    RolesModule,\n    TypeOrmModule.forFeature([PermissionEntity]),\n  ],\n  controllers: [PermissionsController],\n  providers: [\n    {\n      provide: 'APP_GUARD',\n      useExisting: JwtAuthGuard,\n    },\n    {\n      provide: 'APP_GUARD',\n      useClass: PermissionsGaurd,\n    },\n    {\n      provide: 'PERMISSION_SERVICE',\n      useClass: PermissionsService,\n    },\n    JwtAuthGuard,\n  ],\n  exports: [\n    {\n      provide: 'PERMISSION_SERVICE',\n      useClass: PermissionsService,\n    },\n  ],\n})\nexport class PermissionsModule implements NestModule {\n  configure(consumer: any) {\n    consumer.apply(LoggerMiddleware).forRoutes(PermissionsController);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PermissionsService.html":{"url":"injectables/PermissionsService.html","title":"injectable - PermissionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PermissionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permissions/services/permissions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findPermissionByKey\n                            \n                            \n                                getPermissionKeys\n                            \n                            \n                                    Async\n                                getUserPermissions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(permissionRepository: Repository, userService: UsersService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/permissions/services/permissions.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        permissionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(registerPermissionDto: RegisterPermissionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/permissions/services/permissions.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registerPermissionDto\n                                    \n                                                RegisterPermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPermissionByKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPermissionByKey(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/permissions/services/permissions.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPermissionKeys\n                        \n                    \n                \n            \n            \n                \ngetPermissionKeys(permissions: PermissionEntity[])\n                \n            \n\n\n            \n                \n                    Defined in src/permissions/services/permissions.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    permissions\n                                    \n                                                PermissionEntity[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserPermissions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserPermissions(userId: number, ownerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/permissions/services/permissions.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PermissionEntity } from 'src/permissions/Entities';\nimport { Repository } from 'typeorm';\nimport { RegisterPermissionDto } from 'src/permissions/dtos/register-permission.dto';\nimport { UsersService } from 'src/users/services/users.service';\nimport { RolesService } from 'src/roles/services/roles.service';\n\n@Injectable()\nexport class PermissionsService {\n  constructor(\n    @InjectRepository(PermissionEntity)\n    private readonly permissionRepository: Repository,\n    @Inject('USER_SERVICE') private readonly userService: UsersService,\n    @Inject('ROLES_SERVICE') private readonly rolesService: RolesService,\n  ) {}\n\n  async create(registerPermissionDto: RegisterPermissionDto) {\n    this.permissionRepository.create(registerPermissionDto);\n    return this.permissionRepository.save(registerPermissionDto);\n  }\n\n  async getUserPermissions(userId: number, ownerId: number) {\n    const userRoles = await this.userService.getCurrentUserRoles(\n      userId,\n      ownerId,\n    );\n    if (!userRoles) {\n      return null;\n    } else {\n      let userPermissions = [];\n      for (const role of userRoles) {\n        const rolePermissions = await this.rolesService.getRolePermissions(\n          role.id,\n          ownerId,\n        );\n        userPermissions = userPermissions.concat(rolePermissions);\n      }\n\n      return this.getPermissionKeys(userPermissions);\n    }\n  }\n\n  getPermissionKeys(permissions: PermissionEntity[]) {\n    let keys = [];\n    permissions.forEach((rootPermission: PermissionEntity) => {\n      keys = keys.concat(rootPermission.key);\n      if (rootPermission.children) {\n        rootPermission.children.forEach((childPermission: PermissionEntity) => {\n          keys = keys.concat(childPermission.key);\n          if (childPermission.children) {\n            childPermission.children.forEach((grandChild: PermissionEntity) => {\n              keys = keys.concat(grandChild.key);\n            });\n          }\n        });\n      }\n    });\n    return keys;\n  }\n\n  async findPermissionByKey(key: string) {\n    return this.permissionRepository\n      .createQueryBuilder('permissions')\n      .leftJoinAndSelect('permissions.children', 'children')\n      .leftJoinAndSelect('permissions.parent', 'parent')\n      .where('permissions.key = :key', { key: key })\n      .getOne();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterPermissionDto.html":{"url":"classes/RegisterPermissionDto.html","title":"class - RegisterPermissionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterPermissionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permissions/dtos/register-permission.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                children\n                            \n                            \n                                displayName\n                            \n                            \n                                key\n                            \n                            \n                                    Optional\n                                parent\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Child[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/dtos/register-permission.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/dtos/register-permission.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/dtos/register-permission.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/dtos/register-permission.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, IsOptional } from 'class-validator';\n\ntype Parent = {\n  id: number;\n};\n\ntype Child = {\n  key: string;\n  displayName: string;\n  parent?: Child;\n  children?: Child[];\n};\n\nexport class RegisterPermissionDto {\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  displayName: string;\n\n  @IsOptional()\n  parent?: Parent;\n\n  @IsOptional()\n  @IsArray()\n  children?: Child[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/reponse.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            result\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        result:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  result: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    _context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map((result) => ({ result })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Role.html":{"url":"classes/Role.html","title":"class - Role","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/owner/dtos/create-owner.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/owner/dtos/create-owner.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/owner/dtos/create-owner.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsEmail,\n  IsPhoneNumber,\n  Length,\n  IsOptional,\n  IsArray,\n  ArrayMinSize,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nclass Role {\n  id: number;\n  name?: string;\n}\nexport class CreateOwnerDto {\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(5, 20)\n  name?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(5, 20)\n  lastName?: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(8, 50)\n  password: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsPhoneNumber('IR')\n  phoneNumber: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(10, 10)\n  nationalCode?: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(0, 100)\n  address?: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(0, 100)\n  ownerName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(0, 100)\n  ownerDisplayName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Role-1.html":{"url":"classes/Role-1.html","title":"class - Role-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/types/Role.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                color\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/roles/types/Role.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/roles/types/Role.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/roles/types/Role.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/roles/types/Role.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Role {\n  id: number;\n  name: string;\n  permissions: string[];\n  color?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Role-2.html":{"url":"classes/Role-2.html","title":"class - Role-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/types/Role.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                color\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/Role.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/Role.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/Role.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/Role.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Role {\n  id: number;\n  name: string;\n  permissions: string[];\n  color?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Role-3.html":{"url":"classes/Role-3.html","title":"class - Role-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsEmail,\n  IsPhoneNumber,\n  Length,\n  IsOptional,\n  IsArray,\n  ArrayMinSize,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nclass Role {\n  id: number;\n  name?: string;\n}\n\nexport class CreateUserDto {\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(5, 20)\n  name?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(5, 20)\n  lastName?: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(4, 20)\n  username: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(8, 50)\n  password: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsPhoneNumber('IR')\n  phoneNumber: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(10, 10)\n  nationalCode?: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    type: 'array',\n    items: {\n      type: 'object',\n      title: 'Role',\n      properties: {\n        id: {\n          type: 'number',\n        },\n        name: {\n          type: 'string',\n        },\n      },\n      required: ['id'],\n    },\n  })\n  @IsArray()\n  @ArrayMinSize(1)\n  roles: Role[];\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Length(0, 100)\n  address?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  isMainUser: boolean = false;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RoleEntity.html":{"url":"entities/RoleEntity.html","title":"entity - RoleEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RoleEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/Entities/RoleEntity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                created_at\n                            \n                            \n                                created_by\n                            \n                            \n                                description\n                            \n                            \n                                displayName\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                owner\n                            \n                            \n                                permissions\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/Entities/RoleEntity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/Entities/RoleEntity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_by\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/Entities/RoleEntity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/Entities/RoleEntity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/Entities/RoleEntity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/Entities/RoleEntity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/Entities/RoleEntity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OwnerEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/Entities/RoleEntity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermissionEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/Entities/RoleEntity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/Entities/RoleEntity.ts:53\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n  OneToOne,\n  CreateDateColumn,\n  UpdateDateColumn,\n  JoinColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { UserEntity } from 'src/users/Entities/UserEntity';\nimport { OwnerEntity } from 'src/owner/Entities';\nimport { PermissionEntity } from 'src/permissions/Entities';\n\n@Entity()\nexport class RoleEntity {\n  @PrimaryGeneratedColumn({\n    type: 'bigint',\n  })\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  displayName: string;\n\n  @ManyToMany(() => PermissionEntity)\n  @JoinTable()\n  permissions: PermissionEntity[];\n\n  @Column({\n    nullable: true,\n  })\n  color: string;\n\n  @OneToOne(() => UserEntity)\n  @JoinColumn()\n  created_by: UserEntity;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @OneToOne(() => OwnerEntity)\n  @JoinColumn()\n  owner: OwnerEntity;\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  @UpdateDateColumn()\n  updated_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/controllers/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createRoleDto: CreateRoleDto, userInfo: UserInfoType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/roles/controllers/roles.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoleDto\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userInfo\n                                    \n                                                UserInfoType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number, userInfo: UserInfoType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(/search/:id)\n                \n            \n\n            \n                \n                    Defined in src/roles/controllers/roles.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userInfo\n                                    \n                                                UserInfoType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(userInfo: UserInfoType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')\n                \n            \n\n            \n                \n                    Defined in src/roles/controllers/roles.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userInfo\n                                    \n                                                UserInfoType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Param,\n  ParseIntPipe,\n  Post,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { RolesService } from '../services/roles.service';\nimport { CreateRoleDto } from '../dtos/create-role.dto';\nimport { userAndOwnerInfo, UserInfoType } from 'src/utils/user.decorator';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Roles')\n@ApiBearerAuth()\n@Controller('roles')\nexport class RolesController {\n  constructor(\n    @Inject('ROLES_SERVICE') private readonly rolesService: RolesService,\n  ) {}\n\n  @Get('/search')\n  async search(@userAndOwnerInfo() userInfo: UserInfoType) {\n    return this.rolesService.search(userInfo.owner.id);\n  }\n\n  @Get(`/search/:id`)\n  async findById(\n    @Param('id', ParseIntPipe) id: number,\n    @userAndOwnerInfo() userInfo: UserInfoType,\n  ) {\n    const role = await this.rolesService.findById(id, userInfo.owner.id);\n    if (role) return role;\n    else throw new HttpException('user not found !', HttpStatus.NOT_FOUND);\n  }\n\n  @Post('/create')\n  @UsePipes(ValidationPipe)\n  async create(\n    @Body() createRoleDto: CreateRoleDto,\n    @userAndOwnerInfo() userInfo: UserInfoType,\n  ) {\n    return this.rolesService.create(createRoleDto, userInfo.owner.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\n\n{\n    provide: , useClass: RolesService,\n} \n\n{\n    provide: , useClass: RolesService,\n} \n\n\n\nRolesModule\n\nRolesModule\n\n{\n    provide: , useClass: RolesService,\n}  -->\n\nRolesModule->{\n    provide: , useClass: RolesService,\n} \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            {\n    provide: , useClass: RolesService,\n}\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: any)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.module.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, NestModule } from '@nestjs/common';\nimport { RolesService } from './services/roles.service';\nimport { RolesController } from './controllers/roles.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { RoleEntity } from './Entities';\nimport { LoggerMiddleware } from '../Middlewares/logger.middleware';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([RoleEntity])],\n  controllers: [RolesController],\n  providers: [\n    {\n      provide: 'ROLES_SERVICE',\n      useClass: RolesService,\n    },\n    {\n      provide: 'APP_GUARD',\n      useClass: JwtAuthGuard,\n    },\n  ],\n  exports: [\n    {\n      provide: 'ROLES_SERVICE',\n      useClass: RolesService,\n    },\n  ],\n})\nexport class RolesModule implements NestModule {\n  configure(consumer: any) {\n    consumer.apply(LoggerMiddleware).forRoutes(RolesController);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/services/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                getRolePermissions\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roleRepository: Repository, globalService: GlobalService)\n                    \n                \n                        \n                            \n                                Defined in src/roles/services/roles.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        globalService\n                                                  \n                                                        \n                                                                        GlobalService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createRoleDto: CreateRoleDto, ownerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/services/roles.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoleDto\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number, ownerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/services/roles.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRolePermissions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRolePermissions(id: number, ownerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/services/roles.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(ownerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/services/roles.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { RoleEntity } from '../Entities';\nimport { GlobalService } from 'src/global/services/global.service';\nimport { CreateRoleDto } from '../dtos/create-role.dto';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(RoleEntity)\n    private readonly roleRepository: Repository,\n    @Inject('GLOBAL_SERVICE') private readonly globalService: GlobalService,\n  ) {}\n\n  async search(ownerId: number) {\n    return this.roleRepository.find({\n      where: {\n        owner: {\n          id: ownerId,\n        },\n      },\n      relations: ['permissions'],\n    });\n  }\n\n  async findById(id: number, ownerId: number) {\n    const role = await this.roleRepository.findOne({ where: { id: id } });\n    if (role) {\n      if (this.globalService.checkOwner(role, ownerId)) {\n        return role;\n      } else {\n        return null;\n      }\n    } else return null;\n  }\n\n  async create(createRoleDto: CreateRoleDto, ownerId: number) {\n    const newRole = this.roleRepository.create({\n      ...createRoleDto,\n      owner: { id: ownerId },\n    });\n    return this.roleRepository.save(newRole);\n  }\n\n  async getRolePermissions(id: number, ownerId: number) {\n    const role = await this.roleRepository.findOne({\n      where: { id: id },\n      relations: {\n        owner: true,\n        permissions: {\n          parent: true,\n          children: true,\n        },\n      },\n    });\n    if (role) {\n      if (this.globalService.checkOwner(role, ownerId)) {\n        return role.permissions;\n      } else {\n        return [];\n      }\n    } else {\n      return [];\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SerializedUser.html":{"url":"classes/SerializedUser.html","title":"class - SerializedUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SerializedUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/types/SerializedUser.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                nationalCode\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/users/types/SerializedUser.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                    Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/SerializedUser.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/SerializedUser.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/SerializedUser.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/SerializedUser.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/SerializedUser.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nationalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/SerializedUser.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/types/SerializedUser.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/SerializedUser.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleEntity[]\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/SerializedUser.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/SerializedUser.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { RoleEntity } from 'src/roles/Entities';\n\nexport class SerializedUser {\n  name?: string;\n  lastName?: string;\n  id: number;\n  username: string;\n  phoneNumber: string;\n  nationalCode?: string;\n  email: string;\n  roles: RoleEntity[];\n  address?: string;\n\n  @Exclude()\n  password: string;\n\n  constructor(partial: Partial) {\n    Object.assign(this, partial);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SingleOwnerDto.html":{"url":"classes/SingleOwnerDto.html","title":"class - SingleOwnerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SingleOwnerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/owner/dtos/create-single-owner.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@Length(0, 100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/dtos/create-single-owner.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@Length(0, 100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/owner/dtos/create-single-owner.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, Length } from 'class-validator';\n\nexport class SingleOwnerDto {\n  @IsNotEmpty()\n  @Length(0, 100)\n  name: string;\n\n  @IsNotEmpty()\n  @Length(0, 100)\n  displayName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/reponse.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(_context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/reponse.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  result: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    _context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map((result) => ({ result })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/types/User.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                nationalCode\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/User.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/User.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/User.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/User.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/User.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nationalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/User.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/User.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/User.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/User.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types/User.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Role} from \"./Role\";\n\nexport class User {\n    id: number;\n    name?: string;\n    lastName?: string;\n    username: string;\n    password: string;\n    phoneNumber: string;\n    nationalCode?: string;\n    email: string;\n    roles: Role[]\n    address?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/Entities/UserEntity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                created_at\n                            \n                            \n                                defaultOwner\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                isMainUser\n                            \n                            \n                                lastName\n                            \n                            \n                                name\n                            \n                            \n                                nationalCode\n                            \n                            \n                                owners\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                roles\n                            \n                            \n                                updated_at\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Entities/UserEntity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Entities/UserEntity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        defaultOwner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OwnerEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Entities/UserEntity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Entities/UserEntity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Entities/UserEntity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMainUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Entities/UserEntity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Entities/UserEntity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Entities/UserEntity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nationalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Entities/UserEntity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        owners\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OwnerEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, undefined, {cascade: true, eager: true})@Exclude({toPlainOnly: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Entities/UserEntity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Entities/UserEntity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Entities/UserEntity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Entities/UserEntity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Entities/UserEntity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Entities/UserEntity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeInsert,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { RoleEntity } from 'src/roles/Entities';\nimport { OwnerEntity } from 'src/owner/Entities';\nimport * as bcrypt from 'bcrypt';\nimport { Exclude } from 'class-transformer';\n\n@Entity()\nexport class UserEntity {\n  @PrimaryGeneratedColumn({\n    type: 'bigint',\n  })\n  id: number;\n\n  @Column({\n    nullable: true,\n  })\n  name: string;\n\n  @Column({\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    unique: true,\n  })\n  username: string;\n\n  @Column({ select: false })\n  password: string;\n\n  @Column({\n    unique: true,\n  })\n  phoneNumber: string;\n\n  @Column({\n    unique: true,\n    nullable: true,\n  })\n  nationalCode: string;\n\n  @Column({\n    unique: true,\n  })\n  email: string;\n\n  @ManyToMany(() => RoleEntity)\n  @JoinTable()\n  roles: RoleEntity[];\n\n  @Column({\n    nullable: true,\n  })\n  address: string;\n\n  @OneToOne(() => OwnerEntity)\n  @JoinColumn()\n  defaultOwner: OwnerEntity;\n\n  @ManyToMany(() => OwnerEntity, void 0, { cascade: true, eager: true })\n  @Exclude({ toPlainOnly: true })\n  @JoinTable()\n  owners: OwnerEntity[];\n\n  @Column({\n    default: false,\n  })\n  isMainUser: boolean;\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  @UpdateDateColumn()\n  updated_at: Date;\n\n  @BeforeInsert()\n  async encryptPassword() {\n    this.password = await bcrypt.hash(this.password, 10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInfoType.html":{"url":"interfaces/UserInfoType.html","title":"interface - UserInfoType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInfoType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/user.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            owner\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        owner\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        owner:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport jwt_decode from 'jwt-decode';\n\nexport function decodeToken(token: string) {\n  return jwt_decode(token);\n}\n\nexport const userAndOwnerInfo = createParamDecorator(\n  (_data: string, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const decodedToken: any = decodeToken(request.headers.authorization);\n    const sendingInfo: UserInfoType = {\n      user: {\n        id: decodedToken.tokenData ? decodedToken.tokenData.id : 'UNAUTHORIZED',\n      },\n      owner: {\n        id: decodedToken.owner ? decodedToken.owner.id : 'UNAUTHORIZED',\n      },\n    };\n    return sendingInfo;\n  },\n);\n\nexport function getUserInfoFunc(token: string) {\n  const decodedToken: any = decodeToken(token);\n  const sendingInfo: UserInfoType = {\n    user: {\n      id: decodedToken.tokenData ? decodedToken.tokenData.id : 'UNAUTHORIZED',\n    },\n    owner: {\n      id: decodedToken.owner ? decodedToken.owner.id : 'UNAUTHORIZED',\n    },\n  };\n  return sendingInfo;\n}\n\nexport interface UserInfoType {\n  user: {\n    id: number;\n  };\n  owner: {\n    id: number;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                getCurrentUser\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto, userInfo: UserInfoType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userInfo\n                                    \n                                                UserInfoType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number, userInfo: UserInfoType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(ClassSerializerInterceptor)@Get('/search/:id')@UseFilters(new HttpExceptionFilter())\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userInfo\n                                    \n                                                UserInfoType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCurrentUser(userInfo: UserInfoType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/getCurrent')\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userInfo\n                                    \n                                                UserInfoType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(userInfo: UserInfoType, query: PaginateQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(ClassSerializerInterceptor)@RequirePermissions(permissionEnums.LoadUser)@Get('/search')\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userInfo\n                                    \n                                                UserInfoType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                            PaginateQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Get,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Param,\n  Post,\n  UseFilters,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n  ParseIntPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { UsersService } from '../services/users.service';\nimport { HttpExceptionFilter } from 'src/ExceptionHandler/http-exceptions.filter';\nimport { userAndOwnerInfo, UserInfoType } from 'src/utils/user.decorator';\nimport { RequirePermissions } from 'src/utils/permission.decorator';\nimport { Paginate, PaginateQuery } from 'nestjs-paginate';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { permissionEnums } from '../permissions/Permissions';\n\n@ApiTags('Users')\n@ApiBearerAuth()\n@Controller('users')\nexport class UsersController {\n  constructor(\n    @Inject('USER_SERVICE') private readonly usersService: UsersService,\n  ) {}\n\n  @UseInterceptors(ClassSerializerInterceptor)\n  @RequirePermissions(permissionEnums.LoadUser)\n  @Get('/search')\n  async search(\n    @userAndOwnerInfo() userInfo: UserInfoType,\n    @Paginate() query: PaginateQuery,\n  ) {\n    return this.usersService.search(userInfo.owner.id, query);\n  }\n\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Get('/search/:id')\n  @UseFilters(new HttpExceptionFilter())\n  async findById(\n    @Param('id', ParseIntPipe) id: number,\n    @userAndOwnerInfo() userInfo: UserInfoType,\n  ) {\n    const user = await this.usersService.findById(id, userInfo.owner.id);\n    if (user) return user;\n    else throw new HttpException('user not found !', HttpStatus.NOT_FOUND);\n  }\n\n  @Post('/create')\n  @UsePipes(ValidationPipe)\n  async create(\n    @Body() createUserDto: CreateUserDto,\n    @userAndOwnerInfo() userInfo: UserInfoType,\n  ) {\n    return this.usersService.create(createUserDto, userInfo.owner.id);\n  }\n\n  @Get('/getCurrent')\n  async getCurrentUser(@userAndOwnerInfo() userInfo: UserInfoType) {\n    const user = await this.usersService.getCurrentUser(\n      userInfo.user.id,\n      userInfo.owner.id,\n    );\n    if (user) return user;\n    else throw new HttpException('user not found !', HttpStatus.NOT_FOUND);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\n\n{\n    provide: , useClass: UsersService,\n} \n\n{\n    provide: , useClass: UsersService,\n} \n\n\n\nUsersModule\n\nUsersModule\n\n{\n    provide: , useClass: UsersService,\n}  -->\n\nUsersModule->{\n    provide: , useClass: UsersService,\n} \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            {\n    provide: , useClass: UsersService,\n}\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.module.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, NestModule } from '@nestjs/common';\nimport { UsersController } from './controllers/users.controller';\nimport { UsersService } from './services/users.service';\nimport { LoggerMiddleware } from '../Middlewares/logger.middleware';\nimport { UserEntity } from './Entities';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { PermissionsGaurd } from 'src/auth/permissions.guard';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity])],\n  controllers: [UsersController],\n  providers: [\n    {\n      provide: 'APP_GUARD',\n      useClass: JwtAuthGuard,\n    },\n    {\n      provide: 'APP_GUARD',\n      useClass: PermissionsGaurd,\n    },\n    {\n      provide: 'USER_SERVICE',\n      useClass: UsersService,\n    },\n  ],\n  exports: [\n    {\n      provide: 'USER_SERVICE',\n      useClass: UsersService,\n    },\n  ],\n})\nexport class UsersModule implements NestModule {\n  configure(consumer: any) {\n    consumer.apply(LoggerMiddleware).forRoutes(UsersController);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/services/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createMainUser\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findUserByUserName\n                            \n                            \n                                    Async\n                                getCurrentUser\n                            \n                            \n                                    Async\n                                getCurrentUserRoles\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, globalService: GlobalService)\n                    \n                \n                        \n                            \n                                Defined in src/users/services/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        globalService\n                                                  \n                                                        \n                                                                        GlobalService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto, ownerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMainUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMainUser(createMainUserDto: CreateMainUserDto, ownerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createMainUserDto\n                                    \n                                                CreateMainUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number, ownerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserByUserName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByUserName(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCurrentUser(userId: number, ownerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCurrentUserRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCurrentUserRoles(userId: number, ownerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(ownerId: number, query: PaginateQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                            PaginateQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { SerializedUser } from '../types/SerializedUser';\nimport { UserEntity as UserEntity } from '../Entities/UserEntity';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { GlobalService } from 'src/global/services/global.service';\nimport { CreateMainUserDto } from '../dtos/create-main-user.dto';\nimport { paginate, PaginateQuery } from 'nestjs-paginate';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @Inject('GLOBAL_SERVICE') private readonly globalService: GlobalService,\n  ) {}\n\n  async search(ownerId: number, query: PaginateQuery) {\n    const queryBuilder = this.userRepository\n      .createQueryBuilder('users')\n      .leftJoinAndSelect('users.owners', 'owners')\n      .where('owners.id = :ownerId', { ownerId });\n\n    const result = await paginate(query, queryBuilder, {\n      sortableColumns: ['id', 'name', 'lastName', 'username'],\n      searchableColumns: [\n        'name',\n        'lastName',\n        'username',\n        'email',\n        'nationalCode',\n      ],\n      defaultSortBy: [['id', 'DESC']],\n    });\n    delete result.links;\n    return result;\n  }\n\n  async findById(id: number, ownerId: number) {\n    const user = await this.userRepository.findOne({\n      where: {\n        id: id,\n      },\n      relations: ['roles', 'owners'],\n    });\n    if (user) {\n      if (this.globalService.checkOwner(user, ownerId)) {\n        return new SerializedUser(user);\n      } else {\n        return null;\n      }\n    } else return null;\n  }\n\n  async create(createUserDto: CreateUserDto, ownerId: number) {\n    const dtoData = {\n      ...createUserDto,\n      isMainUser: false,\n      defaultOwner: { id: ownerId },\n      owners: [{ id: ownerId }],\n    };\n    const newUser = this.userRepository.create(dtoData);\n    const savedUser = await this.userRepository.save(newUser);\n    return this.findById(savedUser.id, ownerId);\n  }\n\n  async createMainUser(createMainUserDto: CreateMainUserDto, ownerId: number) {\n    const newUser = this.userRepository.create(createMainUserDto);\n    const savedUser = await this.userRepository.save(newUser);\n    return this.findById(savedUser.id, ownerId);\n  }\n\n  async findUserByUserName(username: string) {\n    return this.userRepository.findOne({\n      where: {\n        username: username,\n      },\n      select: [\n        'id',\n        'name',\n        'lastName',\n        'username',\n        'password',\n        'phoneNumber',\n        'nationalCode',\n        'email',\n        'address',\n      ],\n      relations: ['owners', 'defaultOwner'],\n    });\n  }\n\n  async getCurrentUser(userId: number, ownerId: number) {\n    const user = await this.userRepository.findOne({\n      where: {\n        id: userId,\n      },\n    });\n    if (user) {\n      if (this.globalService.checkOwner(user, ownerId)) {\n        return new SerializedUser(user);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  async getCurrentUserRoles(userId: number, ownerId: number) {\n    const user = await this.findById(userId, ownerId);\n    if (user) {\n      return user.roles;\n    } else {\n      return null;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/ExceptionHandler/http-exceptions.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/Middlewares/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/Seeds/sampleSeed.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            function\n            generateAppConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/permissions.guard.ts\n            \n            guard\n            PermissionsGaurd\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/utils/LocalStrategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/utils/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/utils/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/global/controllers/global.controller.ts\n            \n            controller\n            GlobalController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/global/services/global.service.ts\n            \n            injectable\n            GlobalService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/owner/Entities/OwnerEntity.ts\n            \n            entity\n            OwnerEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/owner/Entities/index.ts\n            \n            variable\n            OwnerEntities\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/owner/controllers/owner.controller.ts\n            \n            controller\n            OwnerController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/owner/dtos/create-owner.dto.ts\n            \n            class\n            CreateOwnerDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/owner/dtos/create-owner.dto.ts\n            \n            class\n            Role\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/owner/dtos/create-single-owner.dto.ts\n            \n            class\n            SingleOwnerDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/owner/permissions/Permissions.ts\n            \n            variable\n            ownerPermissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/owner/services/owner.service.ts\n            \n            injectable\n            OwnerService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/permissions/Entities/PermissionEntity.ts\n            \n            entity\n            PermissionEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/permissions/Entities/index.ts\n            \n            variable\n            PermissionEntities\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/permissions/controllers/permissions.controller.ts\n            \n            controller\n            PermissionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/permissions/dtos/register-permission.dto.ts\n            \n            class\n            RegisterPermissionDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/permissions/services/permissions.service.ts\n            \n            injectable\n            PermissionsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/roles/Entities/RoleEntity.ts\n            \n            entity\n            RoleEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/Entities/index.ts\n            \n            variable\n            RoleEntities\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/controllers/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/dtos/create-role.dto.ts\n            \n            class\n            CreateRoleDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/roles/dtos/create-role.dto.ts\n            \n            class\n            Permissions\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/roles/permissions/Permissions.ts\n            \n            variable\n            rolePermissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/services/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/roles/types/Role.ts\n            \n            class\n            Role\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/Entities/Index.ts\n            \n            variable\n            UserEntities\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/Entities/UserEntity.ts\n            \n            entity\n            UserEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/controllers/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/create-main-user.dto.ts\n            \n            class\n            CreateMainUserDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            Role\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/permissions/Permissions.ts\n            \n            variable\n            userPermissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/services/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/types/Permissions.ts\n            \n            class\n            Permissions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/types/Role.ts\n            \n            class\n            Role\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/types/SerializedUser.ts\n            \n            class\n            SerializedUser\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/types/User.ts\n            \n            class\n            User\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/utils/Public.Meta.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/Public.Meta.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/errors.interceptor.ts\n            \n            injectable\n            ErrorsInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/permission.decorator.ts\n            \n            variable\n            PERMISSIONS_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/permission.decorator.ts\n            \n            variable\n            RequirePermissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/reponse.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/reponse.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/swagger.config.ts\n            \n            variable\n            SwaggerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/user.decorator.ts\n            \n            interface\n            UserInfoType\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/user.decorator.ts\n            \n            function\n            decodeToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/user.decorator.ts\n            \n            function\n            getUserInfoFunc\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/user.decorator.ts\n            \n            variable\n            userAndOwnerInfo\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/typeorm : ^9.0.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            dotenv : ^16.0.1\n        \n            jwt-decode : ^3.1.2\n        \n            mysql2 : ^2.3.3\n        \n            nestjs-paginate : ^4.1.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.7\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            permissionEnums   (src/.../Permissions.ts)\n                        \n                        \n                            permissionEnums   (src/.../Permissions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/roles/permissions/Permissions.ts\n    \n        \n            \n                \n                    \n                        \n                        permissionEnums\n                    \n                \n                        \n                            \n                                 CreateRole\n                            \n                        \n                        \n                            \n                                Value : CREATE_ROLE\n                            \n                        \n                        \n                            \n                                 DeleteRole\n                            \n                        \n                        \n                            \n                                Value : DELETE_ROLE\n                            \n                        \n                        \n                            \n                                 LoadRole\n                            \n                        \n                        \n                            \n                                Value : LOAD_ROLE\n                            \n                        \n                        \n                            \n                                 UpdateRole\n                            \n                        \n                        \n                            \n                                Value : UPDATE_ROLE\n                            \n                        \n            \n        \n\n    src/users/permissions/Permissions.ts\n    \n        \n            \n                \n                    \n                        \n                        permissionEnums\n                    \n                \n                        \n                            \n                                 CreateUser\n                            \n                        \n                        \n                            \n                                Value : CREATE_USER\n                            \n                        \n                        \n                            \n                                 DeleteUser\n                            \n                        \n                        \n                            \n                                Value : DELETE_USER\n                            \n                        \n                        \n                            \n                                 LoadUser\n                            \n                        \n                        \n                            \n                                Value : LOAD_USER\n                            \n                        \n                        \n                            \n                                 UpdateUser\n                            \n                        \n                        \n                            \n                                Value : UPDATE_USERS\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../sampleSeed.ts)\n                        \n                        \n                            decodeToken   (src/.../user.decorator.ts)\n                        \n                        \n                            generateAppConfig   (src/.../app.module.ts)\n                        \n                        \n                            getUserInfoFunc   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/Seeds/sampleSeed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(token: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserInfoFunc\n                        \n                    \n                \n            \n            \n                \ngetUserInfoFunc(token: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateAppConfig\n                        \n                    \n                \n            \n            \n                \ngenerateAppConfig()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     TypeOrmModuleOptions\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nFull documentation\nIn order to see all of the docs in one place after runing \n$ npm install\n #or\n$ yarn install Then run:\n$ npm run compodocDescription\nNest js fundumental and starting structure. It has minimum requirements for nest js app development like authentication and role permissions seeds , users and etc. . \nThis app is built with software as a service principles. You have a owner entity and the owner has multiple users with diffrent roles. owner and owners users can only do actions in their owner data's. Allthough the owner's database is all the same but divided by owner_id.\n\nInstallation\nFor running this app you need latest version of node js and NPM. After installing node run this command on project directory.\n$ npm install\n\n# or \n\n$ yarn installRunning the app\nFirst of all run the following command and config your database options in .env file. You need to specify two dfferent database for test and development enviroment : \ncp .env.example .envThen you can run seed command to build tables and seed some vital data's in order to work with API's.\n$ npm run seed:runIn order to seed datas for test enviroment you can run : \n$ npm run seed:run:TestTo serve the app in diffrent modes run following commands: \n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDevelopment\nProject structure is Nest js standard: \n.\n├── src\n│ ├── Middlewares\n│ │ ├───── xxxx.middleware.ts\n│ ├── utils\n│ ├── Seeds\n│ ├── Entity_Name\n│ │ ├── Controllers\n│ │ ├───── Entity_Name.controller.ts\n│ │ ├───── Entity_Name.controller.spec.ts?\n│ │ └── Entities\n│ │ ├───── index.ts\n│ │ ├───── Entity_Name.ts?\n│ │ └── permissions\n│ │ ├───── Permissions.ts\n│ │ └── Services\n│ │ ├───── Entity_Name.service.ts\n│ │ ├───── Entity_Name.service.spec.ts?\n│ │ └── types?\n│ │ ├───── type1.ts\n│ │ ├───── type2.ts?\n│ │ └── Entity_Name.module.ts\n│ ├── ...\n└── app.module.ts\n└── test \n│ ├── Entity_Name\n│ │ ├── Entity_Name.e2e.tsTo build a new module, service, controller etc. you can use nest generator. You can find all required knowladge in NestJs\nStay in touch\n\nAuthor - Mohammad khani\nLinkedIn - Mohammad khani\nTwitter - @KhaniGargantua\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GlobalModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OwnerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PermissionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_GlobalModule\n\n\n\ncluster_GlobalModule_exports\n\n\n\ncluster_OwnerModule\n\n\n\ncluster_OwnerModule_exports\n\n\n\ncluster_OwnerModule_providers\n\n\n\ncluster_PermissionsModule\n\n\n\ncluster_PermissionsModule_exports\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\n{\n    provide: , useClass: AuthService,\n} \n\n{\n    provide: , useClass: AuthService,\n} \n\n{\n    provide: , useClass: AuthService,\n}  -->\n\nAuthModule->{\n    provide: , useClass: AuthService,\n} \n\n\n\n\n\nGlobalModule\n\nGlobalModule\n\nAppModule -->\n\nGlobalModule->AppModule\n\n\n\n\n\n{\n    provide: , useClass: GlobalService,\n} \n\n{\n    provide: , useClass: GlobalService,\n} \n\n{\n    provide: , useClass: GlobalService,\n}  -->\n\nGlobalModule->{\n    provide: , useClass: GlobalService,\n} \n\n\n\n\n\nOwnerModule\n\nOwnerModule\n\nAppModule -->\n\nOwnerModule->AppModule\n\n\n\n\n\n{\n    provide: , useClass: OwnerService,\n} \n\n{\n    provide: , useClass: OwnerService,\n} \n\n{\n    provide: , useClass: OwnerService,\n}  -->\n\nOwnerModule->{\n    provide: , useClass: OwnerService,\n} \n\n\n\n\n\nPermissionsModule\n\nPermissionsModule\n\nOwnerModule -->\n\nPermissionsModule->OwnerModule\n\n\n\nAppModule -->\n\nPermissionsModule->AppModule\n\n\n\n\n\n{\n    provide: , useClass: PermissionsService,\n} \n\n{\n    provide: , useClass: PermissionsService,\n} \n\n{\n    provide: , useClass: PermissionsService,\n}  -->\n\nPermissionsModule->{\n    provide: , useClass: PermissionsService,\n} \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nOwnerModule -->\n\nRolesModule->OwnerModule\n\n\n\nPermissionsModule -->\n\nRolesModule->PermissionsModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\n{\n    provide: , useClass: RolesService,\n} \n\n{\n    provide: , useClass: RolesService,\n} \n\n{\n    provide: , useClass: RolesService,\n}  -->\n\nRolesModule->{\n    provide: , useClass: RolesService,\n} \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nOwnerModule -->\n\nUsersModule->OwnerModule\n\n\n\nPermissionsModule -->\n\nUsersModule->PermissionsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n{\n    provide: , useClass: UsersService,\n} \n\n{\n    provide: , useClass: UsersService,\n} \n\n{\n    provide: , useClass: UsersService,\n}  -->\n\nUsersModule->{\n    provide: , useClass: UsersService,\n} \n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nOwnerModule -->\n\nJwtAuthGuard->OwnerModule\n\n\n\nPermissionsModule -->\n\nJwtAuthGuard->PermissionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    16 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : MIT\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Child   (src/.../register-permission.dto.ts)\n                        \n                        \n                            owner   (src/.../create-main-user.dto.ts)\n                        \n                        \n                            Parent   (src/.../register-permission.dto.ts)\n                        \n                        \n                            Role   (src/.../create-main-user.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/permissions/dtos/register-permission.dto.ts\n    \n    \n        \n            \n                \n                    \n                    Child\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Parent\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/users/dtos/create-main-user.dto.ts\n    \n    \n        \n            \n                \n                    \n                    owner\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Role\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IS_PUBLIC_KEY   (src/.../Public.Meta.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            OwnerEntities   (src/.../index.ts)\n                        \n                        \n                            ownerPermissions   (src/.../Permissions.ts)\n                        \n                        \n                            PermissionEntities   (src/.../index.ts)\n                        \n                        \n                            PERMISSIONS_KEY   (src/.../permission.decorator.ts)\n                        \n                        \n                            Public   (src/.../Public.Meta.ts)\n                        \n                        \n                            RequirePermissions   (src/.../permission.decorator.ts)\n                        \n                        \n                            RoleEntities   (src/.../index.ts)\n                        \n                        \n                            rolePermissions   (src/.../Permissions.ts)\n                        \n                        \n                            SwaggerConfig   (src/.../swagger.config.ts)\n                        \n                        \n                            userAndOwnerInfo   (src/.../user.decorator.ts)\n                        \n                        \n                            UserEntities   (src/.../Index.ts)\n                        \n                        \n                            userPermissions   (src/.../Permissions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/Public.Meta.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/auth/utils/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    secret: 'secretKey',\n}\n                    \n                \n\n\n        \n    \n\n    src/owner/Entities/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OwnerEntities\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [OwnerEntity]\n                    \n                \n\n\n        \n    \n\n    src/owner/permissions/Permissions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ownerPermissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegisterPermissionDto\n\n                    \n                \n                \n                    \n                        Default value : {\n  key: 'OWNER_GENERAL',\n  displayName: 'All owner permissions',\n  children: [\n    {\n      key: 'CREATE_OWNER',\n      displayName: 'Create owner ',\n    },\n    {\n      key: 'DELETE_OWNER',\n      displayName: 'Delete owner',\n    },\n    {\n      key: 'SHOW_OWNER',\n      displayName: 'show owner',\n    },\n    {\n      key: 'UPDATE_OWNER',\n      displayName: 'Update owner',\n    },\n  ],\n}\n                    \n                \n\n\n        \n    \n\n    src/permissions/Entities/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PermissionEntities\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [PermissionEntity]\n                    \n                \n\n\n        \n    \n\n    src/utils/permission.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PERMISSIONS_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'permissions'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequirePermissions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...permissions: string[]) =>\n  SetMetadata(PERMISSIONS_KEY, permissions)\n                    \n                \n\n\n        \n    \n\n    src/roles/Entities/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleEntities\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [RoleEntity]\n                    \n                \n\n\n        \n    \n\n    src/roles/permissions/Permissions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        rolePermissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegisterPermissionDto\n\n                    \n                \n                \n                    \n                        Default value : {\n  key: 'ROLE_GENERAL',\n  displayName: 'All role permissions',\n  children: [\n    {\n      key: 'CREATE_ROLE',\n      displayName: 'Create role ',\n    },\n    {\n      key: 'DELETE_ROLE',\n      displayName: 'Delete role',\n    },\n    {\n      key: 'LOAD_ROLE',\n      displayName: 'Load roles',\n    },\n    {\n      key: 'UPDATE_ROLE',\n      displayName: 'Update role',\n    },\n  ],\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SwaggerConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DocumentBuilder()\n  .setTitle('FS-NestJS')\n  .setDescription('Swagger of FS-NestJS')\n  .setVersion('1.0')\n  .addTag('Permissions')\n  .addTag('Users')\n  .addTag('Owners')\n  .addTag('Roles')\n  .addTag('Authentication')\n  .addBearerAuth()\n  .build()\n                    \n                \n\n\n        \n    \n\n    src/utils/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userAndOwnerInfo\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: string, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const decodedToken: any = decodeToken(request.headers.authorization);\n    const sendingInfo: UserInfoType = {\n      user: {\n        id: decodedToken.tokenData ? decodedToken.tokenData.id : 'UNAUTHORIZED',\n      },\n      owner: {\n        id: decodedToken.owner ? decodedToken.owner.id : 'UNAUTHORIZED',\n      },\n    };\n    return sendingInfo;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/users/Entities/Index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserEntities\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [UserEntity]\n                    \n                \n\n\n        \n    \n\n    src/users/permissions/Permissions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userPermissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegisterPermissionDto\n\n                    \n                \n                \n                    \n                        Default value : {\n  key: 'USER_GENERAL',\n  displayName: 'All users permissions',\n  children: [\n    {\n      key: 'CREATE_USER',\n      displayName: 'Create user',\n    },\n    {\n      key: 'DELETE_USER',\n      displayName: 'Delete user',\n    },\n    {\n      key: 'LOAD_USER',\n      displayName: 'Load users',\n    },\n    {\n      key: 'UPDATE_USERS',\n      displayName: 'Update user',\n    },\n  ],\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
